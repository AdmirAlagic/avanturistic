/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./webpack/scripts.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../src/assets/js/global/components/base/app.js":
/*!******************************************************!*\
  !*** ../src/assets/js/global/components/base/app.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * @class KApp\n */\n\nvar KTApp = function() {\n    /** @type {object} colors State colors **/\n    var colors = {};\n\n    var initTooltip = function(el) {\n        var skin = el.data('skin') ? 'tooltip-' + el.data('skin') : '';\n        var width = el.data('width') == 'auto' ? 'tooltop-auto-width' : '';\n        var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';\n        var placement = el.data('placement') ? el.data('placement') : 'left';\n\n        el.tooltip({\n            trigger: triggerValue,\n            template: '<div class=\"tooltip ' + skin + ' ' + width + '\" role=\"tooltip\">\\\n                <div class=\"arrow\"></div>\\\n                <div class=\"tooltip-inner\"></div>\\\n            </div>'\n        });\n    }\n\n    var initTooltips = function() {\n        // init bootstrap tooltips\n        $('[data-toggle=\"kt-tooltip\"]').each(function() {\n            initTooltip($(this));\n        });\n    }\n\n    var initPopover = function(el) {\n        var skin = el.data('skin') ? 'popover-' + el.data('skin') : '';\n        var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';\n\n        el.popover({\n            trigger: triggerValue,\n            template: '\\\n            <div class=\"popover ' + skin + '\" role=\"tooltip\">\\\n                <div class=\"arrow\"></div>\\\n                <h3 class=\"popover-header\"></h3>\\\n                <div class=\"popover-body\"></div>\\\n            </div>'\n        });\n    }\n\n    var initPopovers = function() {\n        // init bootstrap popover\n        $('[data-toggle=\"kt-popover\"]').each(function() {\n            initPopover($(this));\n        });\n    }\n\n    var initFileInput = function() {\n        // init bootstrap popover\n        $('.custom-file-input').on('change', function() {\n            var fileName = $(this).val();\n            $(this).next('.custom-file-label').addClass(\"selected\").html(fileName);\n        });\n    }\n\n    var initPortlet = function(el, options) {\n        // init portlet tools\n        var el = $(el);\n        var portlet = new KTPortlet(el[0], options);\n    }\n\n    var initPortlets = function() {\n        // init portlet tools\n        $('[data-ktportlet=\"true\"]').each(function() {\n            var el = $(this);\n\n            if (el.data('data-ktportlet-initialized') !== true) {\n                initPortlet(el, {});\n                el.data('data-ktportlet-initialized', true);\n            }\n        });\n    }\n\n    var initScroll = function() {\n        $('[data-scroll=\"true\"]').each(function() {\n            var el = $(this);\n            KTUtil.scrollInit(this, {\n                mobileNativeScroll: true,\n                handleWindowResize: true,\n                rememberPosition: (el.data('remember-position') == 'true' ? true : false),\n                height: function() {\n                    if (KTUtil.isInResponsiveRange('tablet-and-mobile') && el.data('mobile-height')) {\n                        return el.data('mobile-height');\n                    } else {\n                        return el.data('height');\n                    }\n                }\n            });\n        });\n    }\n\n    var initAlerts = function() {\n        // init bootstrap popover\n        $('body').on('click', '[data-close=alert]', function() {\n            $(this).closest('.alert').hide();\n        });\n    }\n\n    var initSticky = function() {\n        var sticky = new Sticky('[data-sticky=\"true\"]');\n    }\n\n    var initAbsoluteDropdown = function(context) {\n        var dropdownMenu;\n\n        if (!context) {\n            return;\n        }\n\n        $('body').on('show.bs.dropdown', context, function(e) {\n        \tdropdownMenu = $(e.target).find('.dropdown-menu');\n        \t$('body').append(dropdownMenu.detach());\n        \tdropdownMenu.css('display', 'block');\n        \tdropdownMenu.position({\n        \t\t'my': 'right top',\n        \t\t'at': 'right bottom',\n        \t\t'of': $(e.relatedTarget),\n        \t});\n        }).on('hide.bs.dropdown', context, function(e) {\n        \t$(e.target).append(dropdownMenu.detach());\n        \tdropdownMenu.hide();\n        });\n    }\n\n    var initAbsoluteDropdowns = function() {\n        $('body').on('show.bs.dropdown', function(e) {\n            if ( $(e.target).find(\"[data-attach='body']\").length === 0) {\n                return;\n            }\n\n            var dropdownMenu = $(e.target).find('.dropdown-menu');\n\n            $('body').append(dropdownMenu.detach());\n            dropdownMenu.css('display', 'block');\n            dropdownMenu.position({\n                'my': 'right top',\n                'at': 'right bottom',\n                'of': $(e.relatedTarget)\n            });\n        });\n\n        $('body').on('hide.bs.dropdown', function(e) {\n            if ( $(e.target).find(\"[data-attach='body']\").length === 0) {\n                return;\n            }\n\n            var dropdownMenu = $(e.target).find('.dropdown-menu');\n\n            $(e.target).append(dropdownMenu.detach());\n            dropdownMenu.hide();\n        });\n    }\n\n    return {\n        init: function(options) {\n            if (options && options.colors) {\n                colors = options.colors;\n            }\n\n            KTApp.initComponents();\n        },\n\n        initComponents: function() {\n            initScroll();\n            initTooltips();\n            initPopovers();\n            initAlerts();\n            initPortlets();\n            initFileInput();\n            initSticky();\n            initAbsoluteDropdowns();\n        },\n\n        initTooltips: function() {\n            initTooltips();\n        },\n\n        initTooltip: function(el) {\n            initTooltip(el);\n        },\n\n        initPopovers: function() {\n            initPopovers();\n        },\n\n        initPopover: function(el) {\n            initPopover(el);\n        },\n\n        initPortlet: function(el, options) {\n            initPortlet(el, options);\n        },\n\n        initPortlets: function() {\n            initPortlets();\n        },\n\n        initSticky: function() {\n            initSticky();\n        },\n\n        initAbsoluteDropdown: function(context) {\n            initAbsoluteDropdown(context);\n        },\n\n        block: function(target, options) {\n            var el = $(target);\n\n            options = $.extend(true, {\n                opacity: 0.05,\n                overlayColor: '#000000',\n                type: '',\n                size: '',\n                state: 'brand',\n                centerX: true,\n                centerY: true,\n                message: '',\n                shadow: true,\n                width: 'auto'\n            }, options);\n\n            var html;\n            var version = options.type ? 'kt-spinner--' + options.type : '';\n            var state = options.state ? 'kt-spinner--' + options.state : '';\n            var size = options.size ? 'kt-spinner--' + options.size : '';\n            var spinner = '<div class=\"kt-spinner ' + version + ' ' + state + ' ' + size + '\"></div';\n\n            if (options.message && options.message.length > 0) {\n                var classes = 'blockui ' + (options.shadow === false ? 'blockui' : '');\n\n                html = '<div class=\"' + classes + '\"><span>' + options.message + '</span><span>' + spinner + '</span></div>';\n\n                var el = document.createElement('div');\n                KTUtil.get('body').prepend(el);\n                KTUtil.addClass(el, classes);\n                el.innerHTML = '<span>' + options.message + '</span><span>' + spinner + '</span>';\n                options.width = KTUtil.actualWidth(el) + 10;\n                KTUtil.remove(el);\n\n                if (target == 'body') {\n                    html = '<div class=\"' + classes + '\" style=\"margin-left:-' + (options.width / 2) + 'px;\"><span>' + options.message + '</span><span>' + spinner + '</span></div>';\n                }\n            } else {\n                html = spinner;\n            }\n\n            var params = {\n                message: html,\n                centerY: options.centerY,\n                centerX: options.centerX,\n                css: {\n                    top: '30%',\n                    left: '50%',\n                    border: '0',\n                    padding: '0',\n                    backgroundColor: 'none',\n                    width: options.width\n                },\n                overlayCSS: {\n                    backgroundColor: options.overlayColor,\n                    opacity: options.opacity,\n                    cursor: 'wait',\n                    zIndex: '10'\n                },\n                onUnblock: function() {\n                    if (el && el[0]) {\n                        KTUtil.css(el[0], 'position', '');\n                        KTUtil.css(el[0], 'zoom', '');\n                    }\n                }\n            };\n\n            if (target == 'body') {\n                params.css.top = '50%';\n                $.blockUI(params);\n            } else {\n                var el = $(target);\n                el.block(params);\n            }\n        },\n\n        unblock: function(target) {\n            if (target && target != 'body') {\n                $(target).unblock();\n            } else {\n                $.unblockUI();\n            }\n        },\n\n        blockPage: function(options) {\n            return KTApp.block('body', options);\n        },\n\n        unblockPage: function() {\n            return KTApp.unblock('body');\n        },\n\n        progress: function(target, options) {\n            var skin = (options && options.skin) ? options.skin : 'light';\n            var alignment = (options && options.alignment) ? options.alignment : 'right';\n            var size = (options && options.size) ? ' kt-spinner--' + options.size : '';\n            var classes = 'kt-spinner ' + 'kt-spinner--' + skin + ' kt-spinner--' + alignment + size;\n\n            KTApp.unprogress(target);\n            KTUtil.attr(target, 'disabled', true);\n\n            $(target).addClass(classes);\n            $(target).data('progress-classes', classes);\n        },\n\n        unprogress: function(target) {\n            $(target).removeClass($(target).data('progress-classes'));\n            KTUtil.removeAttr(target, 'disabled');\n        },\n\n        getStateColor: function(name) {\n            return colors[\"state\"][name];\n        },\n\n        getBaseColor: function(type, level) {\n            return colors[\"base\"][type][level - 1];\n        }\n    };\n}();\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n    module.exports = KTApp;\n}\n\n// Initialize KTApp class on document ready\n$(document).ready(function() {\n    KTApp.init(KTAppOptions);\n});\n\n\n//# sourceURL=webpack:///../src/assets/js/global/components/base/app.js?");

/***/ }),

/***/ "../src/assets/js/global/components/base/avatar.js":
/*!*********************************************************!*\
  !*** ../src/assets/js/global/components/base/avatar.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// plugin setup\nvar KTAvatar = function(elementId, options) {\n    // Main object\n    var the = this;\n    var init = false;\n\n    // Get element object\n    var element = KTUtil.get(elementId);\n    var body = KTUtil.get('body');\n\n    if (!element) {\n        return; \n    }\n\n    // Default options\n    var defaultOptions = {\n    };\n\n    ////////////////////////////\n    // ** Private Methods  ** //\n    ////////////////////////////\n\n    var Plugin = {\n        /**\n         * Construct\n         */\n\n        construct: function(options) {\n            if (KTUtil.data(element).has('avatar')) {\n                the = KTUtil.data(element).get('avatar');\n            } else {\n                // reset menu\n                Plugin.init(options);\n\n                // build menu\n                Plugin.build();\n\n                KTUtil.data(element).set('avatar', the);\n            }\n\n            return the;\n        },\n\n        /**\n         * Init avatar\n         */\n        init: function(options) {\n            the.element = element;\n            the.events = [];\n\n            the.input = KTUtil.find(element, 'input[type=\"file\"]');\n            the.holder = KTUtil.find(element, '.kt-avatar__holder');\n            the.cancel = KTUtil.find(element, '.kt-avatar__cancel');\n            the.src = KTUtil.css(the.holder, 'backgroundImage');\n\n            // merge default and user defined options\n            the.options = KTUtil.deepExtend({}, defaultOptions, options);\n        },\n\n        /**\n         * Build Form Wizard\n         */\n        build: function() {\n            // Handle avatar change\n            KTUtil.addEvent(the.input, 'change', function(e) {\n                e.preventDefault();\n\n\t            if (the.input && the.input.files && the.input.files[0]) {\n\t                var reader = new FileReader();\n\t                reader.onload = function(e) {\n\t                    KTUtil.css(the.holder, 'background-image', 'url('+e.target.result +')');\n\t                }\n\t                reader.readAsDataURL(the.input.files[0]);\n\n\t                KTUtil.addClass(the.element, 'kt-avatar--changed');\n\t            }\n            });\n\n            // Handle avatar cancel\n            KTUtil.addEvent(the.cancel, 'click', function(e) {\n                e.preventDefault();\n\n\t            KTUtil.removeClass(the.element, 'kt-avatar--changed');\n\t            KTUtil.css(the.holder, 'background-image', the.src);\n\t            the.input.value = \"\";\n            });\n        },\n\n        /**\n         * Trigger events\n         */\n        eventTrigger: function(name) {\n            //KTUtil.triggerCustomEvent(name);\n            for (var i = 0; i < the.events.length; i++) {\n                var event = the.events[i];\n                if (event.name == name) {\n                    if (event.one == true) {\n                        if (event.fired == false) {\n                            the.events[i].fired = true;\n                            return event.handler.call(this, the);\n                        }\n                    } else {\n                        return event.handler.call(this, the);\n                    }\n                }\n            }\n        },\n\n        addEvent: function(name, handler, one) {\n            the.events.push({\n                name: name,\n                handler: handler,\n                one: one,\n                fired: false\n            });\n\n            return the;\n        }\n    };\n\n    //////////////////////////\n    // ** Public Methods ** //\n    //////////////////////////\n\n    /**\n     * Set default options \n     */\n\n    the.setDefaults = function(options) {\n        defaultOptions = options;\n    };\n    \n    /**\n     * Attach event\n     */\n    the.on = function(name, handler) {\n        return Plugin.addEvent(name, handler);\n    };\n\n    /**\n     * Attach event that will be fired once\n     */\n    the.one = function(name, handler) {\n        return Plugin.addEvent(name, handler, true);\n    };\n\n    // Construct plugin\n    Plugin.construct.apply(the, [options]);\n\n    return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n    module.exports = KTAvatar;\n}\n\n//# sourceURL=webpack:///../src/assets/js/global/components/base/avatar.js?");

/***/ }),
 
/***/ "../src/assets/js/global/components/base/header.js":
/*!*********************************************************!*\
  !*** ../src/assets/js/global/components/base/header.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar KTHeader = function(elementId, options) {\n    // Main object\n    var the = this;\n    var init = false;\n\n    // Get element object\n    var element = KTUtil.get(elementId);\n    var body = KTUtil.get('body');\n\n    if (element === undefined) {\n        return;\n    }\n\n    // Default options\n    var defaultOptions = {\n        classic: false,\n        offset: {\n            mobile: 150,\n            desktop: 400\n        },\n        minimize: {\n            mobile: false,\n            desktop: false\n        }\n    };\n\n    ////////////////////////////\n    // ** Private Methods  ** //\n    ////////////////////////////\n\n    var Plugin = {\n        /**\n         * Run plugin\n         * @returns {KTHeader}\n         */\n        construct: function(options) {\n            if (KTUtil.data(element).has('header')) {\n                the = KTUtil.data(element).get('header');\n            } else {\n                // reset header\n                Plugin.init(options);\n\n                // build header\n                Plugin.build();\n\n                KTUtil.data(element).set('header', the);\n            }\n\n            return the;\n        },\n\n        /**\n         * Handles subheader click toggle\n         * @returns {KTHeader}\n         */\n        init: function(options) {\n            the.events = [];\n\n            // merge default and user defined options\n            the.options = KTUtil.deepExtend({}, defaultOptions, options);\n        },\n\n        /**\n         * Reset header\n         * @returns {KTHeader}\n         */\n        build: function() {\n            var lastScrollTop = 0;\n            var eventTriggerState = true;\n            var viewportHeight = KTUtil.getViewPort().height;\n            var documentHeight = KTUtil.getDocumentHeight();\n\n            if (the.options.minimize.mobile === false && the.options.minimize.desktop === false) {\n                return;\n            }\n\n            window.addEventListener('scroll', function() {\n                var offset = 0, on, off, st;\n\n                if (KTUtil.isInResponsiveRange('desktop')) {\n                    offset = the.options.offset.desktop;\n                    on = the.options.minimize.desktop.on;\n                    off = the.options.minimize.desktop.off;\n                } else if (KTUtil.isInResponsiveRange('tablet-and-mobile')) {\n                    offset = the.options.offset.mobile;\n                    on = the.options.minimize.mobile.on;\n                    off = the.options.minimize.mobile.off;\n                }\n\n                st = KTUtil.getScrollTop();\n\n                \n\n                if (\n                    (KTUtil.isInResponsiveRange('tablet-and-mobile') && the.options.classic && the.options.classic.mobile) ||\n                    (KTUtil.isInResponsiveRange('desktop') && the.options.classic && the.options.classic.desktop)\n                ) {\n                    if (st > offset) { // down scroll mode\n                        KTUtil.addClass(body, on);\n                        KTUtil.removeClass(body, off);\n\n                        if (eventTriggerState) {\n                            Plugin.eventTrigger('minimizeOn', the);\n                            eventTriggerState = false;\n                        }\n                    } else { // back scroll mode\n                        KTUtil.addClass(body, off);\n                        KTUtil.removeClass(body, on);\n\n                        if (eventTriggerState == false) {\n                            Plugin.eventTrigger('minimizeOff', the);\n                            eventTriggerState = true;\n                        }\n                    }\n                } else {\n                    if (st > offset && lastScrollTop < st) { // down scroll mode\n                        KTUtil.addClass(body, on);\n                        KTUtil.removeClass(body, off);\n\n                        if (eventTriggerState) {\n                            Plugin.eventTrigger('minimizeOn', the);\n                            eventTriggerState = false;\n                        }\n                    } else { // back scroll mode\n                        KTUtil.addClass(body, off);\n                        KTUtil.removeClass(body, on);\n\n                        if (eventTriggerState == false) {\n                            Plugin.eventTrigger('minimizeOff', the);\n                            eventTriggerState = true;\n                        }\n                    }\n\n                    lastScrollTop = st;\n                }\n            });\n        },\n\n        /**\n         * Trigger events\n         */\n        eventTrigger: function(name, args) {\n            for (var i = 0; i < the.events.length; i++) {\n                var event = the.events[i];\n                if (event.name == name) {\n                    if (event.one == true) {\n                        if (event.fired == false) {\n                            the.events[i].fired = true;\n                            return event.handler.call(this, the, args);\n                        }\n                    } else {\n                        return event.handler.call(this, the, args);\n                    }\n                }\n            }\n        },\n\n        addEvent: function(name, handler, one) {\n            the.events.push({\n                name: name,\n                handler: handler,\n                one: one,\n                fired: false\n            });\n        }\n    };\n\n    //////////////////////////\n    // ** Public Methods ** //\n    //////////////////////////\n\n    /**\n     * Set default options\n     */\n\n    the.setDefaults = function(options) {\n        defaultOptions = options;\n    };\n\n    /**\n     * Register event\n     */\n    the.on = function(name, handler) {\n        return Plugin.addEvent(name, handler);\n    };\n\n    ///////////////////////////////\n    // ** Plugin Construction ** //\n    ///////////////////////////////\n\n    // Run plugin\n    Plugin.construct.apply(the, [options]);\n\n    // Init done\n    init = true;\n\n    // Return plugin instance\n    return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n    module.exports = KTHeader;\n}\n\n\n//# sourceURL=webpack:///../src/assets/js/global/components/base/header.js?");

/***/ }),

/***/ "../src/assets/js/global/components/base/menu.js":
/*!*******************************************************!*\
  !*** ../src/assets/js/global/components/base/menu.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar KTMenu = function(elementId, options) {\n    // Main object\n    var the = this;\n    var init = false;\n\n    // Get element object\n    var element = KTUtil.get(elementId);\n    var body = KTUtil.get('body');\n\n    if (!element) {\n        return;\n    }\n\n    // Default options\n    var defaultOptions = {\n        // scrollable area with Perfect Scroll\n        scroll: {\n            rememberPosition: false\n        },\n\n        // accordion submenu mode\n        accordion: {\n            slideSpeed: 200, // accordion toggle slide speed in milliseconds\n            autoScroll: false, // enable auto scrolling(focus) to the clicked menu item\n            autoScrollSpeed: 1200,\n            expandAll: true // allow having multiple expanded accordions in the menu\n        },\n\n        // dropdown submenu mode\n        dropdown: {\n            timeout: 500 // timeout in milliseconds to show and hide the hoverable submenu dropdown\n        }\n    };\n\n    ////////////////////////////\n    // ** Private Methods  ** //\n    ////////////////////////////\n\n    var Plugin = {\n        /**\n         * Run plugin\n         * @returns {KTMenu}\n         */\n        construct: function(options) {\n            if (KTUtil.data(element).has('menu')) {\n                the = KTUtil.data(element).get('menu');\n            } else {\n                // reset menu\n                Plugin.init(options);\n\n                // reset menu\n                Plugin.reset();\n\n                // build menu\n                Plugin.build();\n\n                KTUtil.data(element).set('menu', the);\n            }\n\n            return the;\n        },\n\n        /**\n         * Handles submenu click toggle\n         * @returns {KTMenu}\n         */\n        init: function(options) {\n            the.events = [];\n\n            the.eventHandlers = {};\n\n            // merge default and user defined options\n            the.options = KTUtil.deepExtend({}, defaultOptions, options);\n\n            // pause menu\n            the.pauseDropdownHoverTime = 0;\n\n            the.uid = KTUtil.getUniqueID();\n        },\n\n        update: function(options) {\n            // merge default and user defined options\n            the.options = KTUtil.deepExtend({}, defaultOptions, options);\n\n            // pause menu\n            the.pauseDropdownHoverTime = 0;\n\n             // reset menu\n            Plugin.reset();\n\n            the.eventHandlers = {};\n\n            // build menu\n            Plugin.build();\n\n            KTUtil.data(element).set('menu', the);\n        },\n\n        reload: function() {\n             // reset menu\n            Plugin.reset();\n\n            // build menu\n            Plugin.build();\n\n            // reset submenu props\n            Plugin.resetSubmenuProps();\n        },\n\n        /**\n         * Reset menu\n         * @returns {KTMenu}\n         */\n        build: function() {\n            // General accordion submenu toggle\n            the.eventHandlers['event_1'] = KTUtil.on( element, '.kt-menu__toggle', 'click', Plugin.handleSubmenuAccordion);\n\n            // Dropdown mode(hoverable)\n            if (Plugin.getSubmenuMode() === 'dropdown' || Plugin.isConditionalSubmenuDropdown()) {\n                // dropdown submenu - hover toggle\n                the.eventHandlers['event_2'] = KTUtil.on( element, '[data-ktmenu-submenu-toggle=\"hover\"]', 'mouseover', Plugin.handleSubmenuDrodownHoverEnter);\n                the.eventHandlers['event_3'] = KTUtil.on( element, '[data-ktmenu-submenu-toggle=\"hover\"]', 'mouseout', Plugin.handleSubmenuDrodownHoverExit);\n\n                // dropdown submenu - click toggle\n                the.eventHandlers['event_4'] = KTUtil.on( element, '[data-ktmenu-submenu-toggle=\"click\"] > .kt-menu__toggle, [data-ktmenu-submenu-toggle=\"click\"] > .kt-menu__link .kt-menu__toggle', 'click', Plugin.handleSubmenuDropdownClick);\n                the.eventHandlers['event_5'] = KTUtil.on( element, '[data-ktmenu-submenu-toggle=\"tab\"] > .kt-menu__toggle, [data-ktmenu-submenu-toggle=\"tab\"] > .kt-menu__link .kt-menu__toggle', 'click', Plugin.handleSubmenuDropdownTabClick);\n            }\n\n            // handle link click\n            the.eventHandlers['event_6'] = KTUtil.on(element, '.kt-menu__item > .kt-menu__link:not(.kt-menu__toggle):not(.kt-menu__link--toggle-skip)', 'click', Plugin.handleLinkClick);\n\n            // Init scrollable menu\n            if (the.options.scroll && the.options.scroll.height) {\n                Plugin.scrollInit();\n            }\n        },\n\n        /**\n         * Reset menu\n         * @returns {KTMenu}\n         */\n        reset: function() {\n            KTUtil.off( element, 'click', the.eventHandlers['event_1']);\n\n            // dropdown submenu - hover toggle\n            KTUtil.off( element, 'mouseover', the.eventHandlers['event_2']);\n            KTUtil.off( element, 'mouseout', the.eventHandlers['event_3']);\n\n            // dropdown submenu - click toggle\n            KTUtil.off( element, 'click', the.eventHandlers['event_4']);\n            KTUtil.off( element, 'click', the.eventHandlers['event_5']);\n\n            // handle link click\n            KTUtil.off(element, 'click', the.eventHandlers['event_6']);\n        },\n\n        /**\n         * Init scroll menu\n         *\n        */\n        scrollInit: function() {\n            if ( the.options.scroll && the.options.scroll.height ) {\n                KTUtil.scrollDestroy(element);\n                KTUtil.scrollInit(element, {mobileNativeScroll: true, windowScroll: false, resetHeightOnDestroy: true, handleWindowResize: true, height: the.options.scroll.height, rememberPosition: the.options.scroll.rememberPosition});\n            } else {\n                KTUtil.scrollDestroy(element);\n            }\n        },\n\n        /**\n         * Update scroll menu\n        */\n        scrollUpdate: function() {\n            if ( the.options.scroll && the.options.scroll.height ) {\n                KTUtil.scrollUpdate(element);\n            }\n        },\n\n        /**\n         * Scroll top\n        */\n        scrollTop: function() {\n            if ( the.options.scroll && the.options.scroll.height ) {\n                KTUtil.scrollTop(element);\n            }\n        },\n\n        /**\n         * Get submenu mode for current breakpoint and menu state\n         * @returns {KTMenu}\n         */\n        getSubmenuMode: function(el) {\n            if ( KTUtil.isInResponsiveRange('desktop') ) {\n                if (el && KTUtil.hasAttr(el, 'data-ktmenu-submenu-toggle') && KTUtil.attr(el, 'data-ktmenu-submenu-toggle') == 'hover') {\n                    return 'dropdown';\n                }\n\n                if ( KTUtil.isset(the.options.submenu, 'desktop.state.body') ) {\n                    if ( KTUtil.hasClasses(body, the.options.submenu.desktop.state.body) ) {\n                        return the.options.submenu.desktop.state.mode;\n                    } else {\n                        return the.options.submenu.desktop.default;\n                    }\n                } else if ( KTUtil.isset(the.options.submenu, 'desktop') ) {\n                    return the.options.submenu.desktop;\n                }\n            } else if ( KTUtil.isInResponsiveRange('tablet') && KTUtil.isset(the.options.submenu, 'tablet') ) {\n                return the.options.submenu.tablet;\n            } else if ( KTUtil.isInResponsiveRange('mobile') && KTUtil.isset(the.options.submenu, 'mobile') ) {\n                return the.options.submenu.mobile;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Get submenu mode for current breakpoint and menu state\n         * @returns {KTMenu}\n         */\n        isConditionalSubmenuDropdown: function() {\n            if ( KTUtil.isInResponsiveRange('desktop') && KTUtil.isset(the.options.submenu, 'desktop.state.body') ) {\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n\n        /**\n         * Reset submenu attributes\n         * @returns {KTMenu}\n         */\n        resetSubmenuProps: function(e) {\n            var submenus = KTUtil.findAll(element, '.kt-menu__submenu');\n            if ( submenus ) {\n                for (var i = 0, len = submenus.length; i < len; i++) {\n                    KTUtil.css(submenus[0], 'display', '');\n                    KTUtil.css(submenus[0], 'overflow', '');\n                }\n            }\n        },\n\n        /**\n         * Handles submenu hover toggle\n         * @returns {KTMenu}\n         */\n        handleSubmenuDrodownHoverEnter: function(e) {\n            if ( Plugin.getSubmenuMode(this) === 'accordion' ) {\n                return;\n            }\n\n            if ( the.resumeDropdownHover() === false ) {\n                return;\n            }\n\n            var item = this;\n\n            if ( item.getAttribute('data-hover') == '1' ) {\n                item.removeAttribute('data-hover');\n                clearTimeout( item.getAttribute('data-timeout') );\n                item.removeAttribute('data-timeout');\n                //Plugin.hideSubmenuDropdown(item, false);\n            }\n\n            // console.log('test!');\n\n            Plugin.showSubmenuDropdown(item);\n        },\n\n        /**\n         * Handles submenu hover toggle\n         * @returns {KTMenu}\n         */\n        handleSubmenuDrodownHoverExit: function(e) {\n            if ( the.resumeDropdownHover() === false ) {\n                return;\n            }\n\n            if ( Plugin.getSubmenuMode(this) === 'accordion' ) {\n                return;\n            }\n\n            var item = this;\n            var time = the.options.dropdown.timeout;\n\n            var timeout = setTimeout(function() {\n                if ( item.getAttribute('data-hover') == '1' ) {\n                    Plugin.hideSubmenuDropdown(item, true);\n                }\n            }, time);\n\n            item.setAttribute('data-hover', '1');\n            item.setAttribute('data-timeout', timeout);\n        },\n\n        /**\n         * Handles submenu click toggle\n         * @returns {KTMenu}\n         */\n        handleSubmenuDropdownClick: function(e) {\n            if ( Plugin.getSubmenuMode(this) === 'accordion' ) {\n                return;\n            }\n\n            var item = this.closest('.kt-menu__item');\n\n            if ( item.getAttribute('data-ktmenu-submenu-mode') == 'accordion' ) {\n                return;\n            }\n\n            if ( KTUtil.hasClass(item, 'kt-menu__item--hover') === false ) {\n                KTUtil.addClass(item, 'kt-menu__item--open-dropdown');\n                Plugin.showSubmenuDropdown(item);\n            } else {\n                KTUtil.removeClass(item, 'kt-menu__item--open-dropdown' );\n                Plugin.hideSubmenuDropdown(item, true);\n            }\n\n            e.preventDefault();\n        },\n\n        /**\n         * Handles tab click toggle\n         * @returns {KTMenu}\n         */\n        handleSubmenuDropdownTabClick: function(e) {\n            if (Plugin.getSubmenuMode(this) === 'accordion') {\n                return;\n            }\n\n            var item = this.closest('.kt-menu__item');\n\n            if (item.getAttribute('data-ktmenu-submenu-mode') == 'accordion') {\n                return;\n            }\n\n            if (KTUtil.hasClass(item, 'kt-menu__item--hover') == false) {\n                KTUtil.addClass(item, 'kt-menu__item--open-dropdown');\n                Plugin.showSubmenuDropdown(item);\n            }\n\n            e.preventDefault();\n        },\n\n        /**\n         * Handles link click\n         * @returns {KTMenu}\n         */\n        handleLinkClick: function(e) {\n            var submenu = this.closest('.kt-menu__item.kt-menu__item--submenu'); //\n\n            var result = Plugin.eventTrigger('linkClick', this, e);\n            if (result === false) {\n                return;\n            }\n\n            if ( submenu && Plugin.getSubmenuMode(submenu) === 'dropdown' ) {\n                Plugin.hideSubmenuDropdowns();\n            }\n        },\n\n        /**\n         * Handles submenu dropdown close on link click\n         * @returns {KTMenu}\n         */\n        handleSubmenuDropdownClose: function(e, el) {\n            // exit if its not submenu dropdown mode\n            if (Plugin.getSubmenuMode(el) === 'accordion') {\n                return;\n            }\n\n            var shown = element.querySelectorAll('.kt-menu__item.kt-menu__item--submenu.kt-menu__item--hover:not(.kt-menu__item--tabs)');\n\n            // check if currently clicked link's parent item ha\n            if (shown.length > 0 && KTUtil.hasClass(el, 'kt-menu__toggle') === false && el.querySelectorAll('.kt-menu__toggle').length === 0) {\n                // close opened dropdown menus\n                for (var i = 0, len = shown.length; i < len; i++) {\n                    Plugin.hideSubmenuDropdown(shown[0], true);\n                }\n            }\n        },\n\n        /**\n         * helper functions\n         * @returns {KTMenu}\n         */\n        handleSubmenuAccordion: function(e, el) {\n            var query;\n            var item = el ? el : this;\n\n            if ( Plugin.getSubmenuMode(el) === 'dropdown' && (query = item.closest('.kt-menu__item') ) ) {\n                if (query.getAttribute('data-ktmenu-submenu-mode') != 'accordion' ) {\n                    e.preventDefault();\n                    return;\n                }\n            }\n\n            var li = item.closest('.kt-menu__item');\n            var submenu = KTUtil.child(li, '.kt-menu__submenu, .kt-menu__inner');\n\n            if (KTUtil.hasClass(item.closest('.kt-menu__item'), 'kt-menu__item--open-always')) {\n                return;\n            }\n\n            if ( li && submenu ) {\n                e.preventDefault();\n                var speed = the.options.accordion.slideSpeed;\n                var hasClosables = false;\n\n                if ( KTUtil.hasClass(li, 'kt-menu__item--open') === false ) {\n                    // hide other accordions\n                    if ( the.options.accordion.expandAll === false ) {\n                        var subnav = item.closest('.kt-menu__nav, .kt-menu__subnav');\n                        var closables = KTUtil.children(subnav, '.kt-menu__item.kt-menu__item--open.kt-menu__item--submenu:not(.kt-menu__item--here):not(.kt-menu__item--open-always)');\n\n                        if ( subnav && closables ) {\n                            for (var i = 0, len = closables.length; i < len; i++) {\n                                var el_ = closables[0];\n                                var submenu_ = KTUtil.child(el_, '.kt-menu__submenu');\n                                if ( submenu_ ) {\n                                    KTUtil.slideUp(submenu_, speed, function() {\n                                        Plugin.scrollUpdate();\n                                        KTUtil.removeClass(el_, 'kt-menu__item--open');\n                                    });\n                                }\n                            }\n                        }\n                    }\n\n                    KTUtil.slideDown(submenu, speed, function() {\n                        Plugin.scrollToItem(item);\n                        Plugin.scrollUpdate();\n\n                        Plugin.eventTrigger('submenuToggle', submenu, e);\n                    });\n\n                    KTUtil.addClass(li, 'kt-menu__item--open');\n\n                } else {\n                    KTUtil.slideUp(submenu, speed, function() {\n                        Plugin.scrollToItem(item);\n                        Plugin.eventTrigger('submenuToggle', submenu, e);\n                    });\n\n                    KTUtil.removeClass(li, 'kt-menu__item--open');\n                }\n            }\n        },\n\n        /**\n         * scroll to item function\n         * @returns {KTMenu}\n         */\n        scrollToItem: function(item) {\n            // handle auto scroll for accordion submenus\n            if ( KTUtil.isInResponsiveRange('desktop') && the.options.accordion.autoScroll && element.getAttribute('data-ktmenu-scroll') !== '1' ) {\n                KTUtil.scrollTo(item, the.options.accordion.autoScrollSpeed);\n            }\n        },\n\n        /**\n         * Hide submenu dropdown\n         * @returns {KTMenu}\n         */\n        hideSubmenuDropdown: function(item, classAlso) {\n            // remove submenu activation class\n            if ( classAlso ) {\n                KTUtil.removeClass(item, 'kt-menu__item--hover');\n                KTUtil.removeClass(item, 'kt-menu__item--active-tab');\n            }\n\n            // clear timeout\n            item.removeAttribute('data-hover');\n\n            if ( item.getAttribute('data-ktmenu-dropdown-toggle-class') ) {\n                KTUtil.removeClass(body, item.getAttribute('data-ktmenu-dropdown-toggle-class'));\n            }\n\n            var timeout = item.getAttribute('data-timeout');\n            item.removeAttribute('data-timeout');\n            clearTimeout(timeout);\n        },\n\n        /**\n         * Hide submenu dropdowns\n         * @returns {KTMenu}\n         */\n        hideSubmenuDropdowns: function() {\n            var items;\n            if ( items = element.querySelectorAll('.kt-menu__item--submenu.kt-menu__item--hover:not(.kt-menu__item--tabs):not([data-ktmenu-submenu-toggle=\"tab\"])') ) {\n                for (var j = 0, cnt = items.length; j < cnt; j++) {\n                    Plugin.hideSubmenuDropdown(items[j], true);\n                }\n            }\n        },\n\n        /**\n         * helper functions\n         * @returns {KTMenu}\n         */\n        showSubmenuDropdown: function(item) {\n            // close active submenus\n            var list = element.querySelectorAll('.kt-menu__item--submenu.kt-menu__item--hover, .kt-menu__item--submenu.kt-menu__item--active-tab');\n\n            if ( list ) {\n                for (var i = 0, len = list.length; i < len; i++) {\n                    var el = list[i];\n                    if ( item !== el && el.contains(item) === false && item.contains(el) === false ) {\n                        Plugin.hideSubmenuDropdown(el, true);\n                    }\n                }\n            }\n\n            // add submenu activation class\n            KTUtil.addClass(item, 'kt-menu__item--hover');\n\n            if ( item.getAttribute('data-ktmenu-dropdown-toggle-class') ) {\n                KTUtil.addClass(body, item.getAttribute('data-ktmenu-dropdown-toggle-class'));\n            }\n        },\n\n        /**\n         * Handles submenu slide toggle\n         * @returns {KTMenu}\n         */\n        createSubmenuDropdownClickDropoff: function(el) {\n            var query;\n            var zIndex = (query = KTUtil.child(el, '.kt-menu__submenu') ? KTUtil.css(query, 'z-index') : 0) - 1;\n\n            var dropoff = document.createElement('<div class=\"kt-menu__dropoff\" style=\"background: transparent; position: fixed; top: 0; bottom: 0; left: 0; right: 0; z-index: ' + zIndex + '\"></div>');\n\n            body.appendChild(dropoff);\n\n            KTUtil.addEvent(dropoff, 'click', function(e) {\n                e.stopPropagation();\n                e.preventDefault();\n                KTUtil.remove(this);\n                Plugin.hideSubmenuDropdown(el, true);\n            });\n        },\n\n        /**\n         * Handles submenu hover toggle\n         * @returns {KTMenu}\n         */\n        pauseDropdownHover: function(time) {\n            var date = new Date();\n\n            the.pauseDropdownHoverTime = date.getTime() + time;\n        },\n\n        /**\n         * Handles submenu hover toggle\n         * @returns {KTMenu}\n         */\n        resumeDropdownHover: function() {\n            var date = new Date();\n\n            return (date.getTime() > the.pauseDropdownHoverTime ? true : false);\n        },\n\n        /**\n         * Reset menu's current active item\n         * @returns {KTMenu}\n         */\n        resetActiveItem: function(item) {\n            var list;\n            var parents;\n\n            list = element.querySelectorAll('.kt-menu__item--active');\n\n            for (var i = 0, len = list.length; i < len; i++) {\n                var el = list[0];\n                KTUtil.removeClass(el, 'kt-menu__item--active');\n                KTUtil.hide( KTUtil.child(el, '.kt-menu__submenu') );\n                parents = KTUtil.parents(el, '.kt-menu__item--submenu') || [];\n\n                for (var i_ = 0, len_ = parents.length; i_ < len_; i_++) {\n                    var el_ = parents[i];\n                    KTUtil.removeClass(el_, 'kt-menu__item--open');\n                    KTUtil.hide( KTUtil.child(el_, '.kt-menu__submenu') );\n                }\n            }\n\n            // close open submenus\n            if ( the.options.accordion.expandAll === false ) {\n                if ( list = element.querySelectorAll('.kt-menu__item--open') ) {\n                    for (var i = 0, len = list.length; i < len; i++) {\n                        KTUtil.removeClass(parents[0], 'kt-menu__item--open');\n                    }\n                }\n            }\n        },\n\n        /**\n         * Sets menu's active item\n         * @returns {KTMenu}\n         */\n        setActiveItem: function(item) {\n            // reset current active item\n            Plugin.resetActiveItem();\n\n            var parents = KTUtil.parents(item, '.kt-menu__item--submenu') || [];\n            for (var i = 0, len = parents.length; i < len; i++) {\n                KTUtil.addClass(KTUtil.get(parents[i]), 'kt-menu__item--open');\n            }\n\n            KTUtil.addClass(KTUtil.get(item), 'kt-menu__item--active');\n        },\n\n        /**\n         * Returns page breadcrumbs for the menu's active item\n         * @returns {KTMenu}\n         */\n        getBreadcrumbs: function(item) {\n            var query;\n            var breadcrumbs = [];\n            var link = KTUtil.child(item, '.kt-menu__link');\n\n            breadcrumbs.push({\n                text: (query = KTUtil.child(link, '.kt-menu__link-text') ? query.innerHTML : ''),\n                title: link.getAttribute('title'),\n                href: link.getAttribute('href')\n            });\n\n            var parents = KTUtil.parents(item, '.kt-menu__item--submenu');\n            for (var i = 0, len = parents.length; i < len; i++) {\n                var submenuLink = KTUtil.child(parents[i], '.kt-menu__link');\n\n                breadcrumbs.push({\n                    text: (query = KTUtil.child(submenuLink, '.kt-menu__link-text') ? query.innerHTML : ''),\n                    title: submenuLink.getAttribute('title'),\n                    href: submenuLink.getAttribute('href')\n                });\n            }\n\n            return  breadcrumbs.reverse();\n        },\n\n        /**\n         * Returns page title for the menu's active item\n         * @returns {KTMenu}\n         */\n        getPageTitle: function(item) {\n            var query;\n\n            return (query = KTUtil.child(item, '.kt-menu__link-text') ? query.innerHTML : '');\n        },\n\n        /**\n         * Trigger events\n         */\n        eventTrigger: function(name, target, e) {\n            for (var i = 0; i < the.events.length; i++ ) {\n                var event = the.events[i];\n                if ( event.name == name ) {\n                    if ( event.one == true ) {\n                        if ( event.fired == false ) {\n                            the.events[i].fired = true;\n                            return event.handler.call(this, target, e);\n                        }\n                    } else {\n                        return event.handler.call(this, target, e);\n                    }\n                }\n            }\n        },\n\n        addEvent: function(name, handler, one) {\n            the.events.push({\n                name: name,\n                handler: handler,\n                one: one,\n                fired: false\n            });\n        },\n\n        removeEvent: function(name) {\n            if (the.events[name]) {\n                delete the.events[name];\n            }\n        }\n    };\n\n    //////////////////////////\n    // ** Public Methods ** //\n    //////////////////////////\n\n    /**\n     * Set default options\n     */\n\n    the.setDefaults = function(options) {\n        defaultOptions = options;\n    };\n\n    /**\n     * Update scroll\n     */\n    the.scrollUpdate = function() {\n        return Plugin.scrollUpdate();\n    };\n\n    /**\n     * Re-init scroll\n     */\n    the.scrollReInit = function() {\n        return Plugin.scrollInit();\n    };\n\n    /**\n     * Scroll top\n     */\n    the.scrollTop = function() {\n        return Plugin.scrollTop();\n    };\n\n    /**\n     * Set active menu item\n     */\n    the.setActiveItem = function(item) {\n        return Plugin.setActiveItem(item);\n    };\n\n    the.reload = function() {\n        return Plugin.reload();\n    };\n\n    the.update = function(options) {\n        return Plugin.update(options);\n    };\n\n    /**\n     * Set breadcrumb for menu item\n     */\n    the.getBreadcrumbs = function(item) {\n        return Plugin.getBreadcrumbs(item);\n    };\n\n    /**\n     * Set page title for menu item\n     */\n    the.getPageTitle = function(item) {\n        return Plugin.getPageTitle(item);\n    };\n\n    /**\n     * Get submenu mode\n     */\n    the.getSubmenuMode = function(el) {\n        return Plugin.getSubmenuMode(el);\n    };\n\n    /**\n     * Hide dropdown\n     * @returns {Object}\n     */\n    the.hideDropdown = function(item) {\n        Plugin.hideSubmenuDropdown(item, true);\n    };\n\n    /**\n     * Hide dropdowns\n     * @returns {Object}\n     */\n    the.hideDropdowns = function() {\n        Plugin.hideSubmenuDropdowns();\n    };\n\n    /**\n     * Disable menu for given time\n     * @returns {Object}\n     */\n    the.pauseDropdownHover = function(time) {\n        Plugin.pauseDropdownHover(time);\n    };\n\n    /**\n     * Disable menu for given time\n     * @returns {Object}\n     */\n    the.resumeDropdownHover = function() {\n        return Plugin.resumeDropdownHover();\n    };\n\n    /**\n     * Register event\n     */\n    the.on = function(name, handler) {\n        return Plugin.addEvent(name, handler);\n    };\n\n    the.off = function(name) {\n        return Plugin.removeEvent(name);\n    };\n\n    the.one = function(name, handler) {\n        return Plugin.addEvent(name, handler, true);\n    };\n\n    ///////////////////////////////\n    // ** Plugin Construction ** //\n    ///////////////////////////////\n\n    // Run plugin\n    Plugin.construct.apply(the, [options]);\n\n    // Handle plugin on window resize\n    KTUtil.addResizeHandler(function() {\n        if (init) {\n            the.reload();\n        }\n    });\n\n    // Init done\n    init = true;\n\n    // Return plugin instance\n    return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n    module.exports = KTMenu;\n}\n\n// Plugin global lazy initialization\ndocument.addEventListener(\"click\", function (e) {\n    var body = KTUtil.get('body');\n    var query;\n    if ( query = body.querySelectorAll('.kt-menu__nav .kt-menu__item.kt-menu__item--submenu.kt-menu__item--hover:not(.kt-menu__item--tabs)[data-ktmenu-submenu-toggle=\"click\"]') ) {\n        for (var i = 0, len = query.length; i < len; i++) {\n            var element = query[i].closest('.kt-menu__nav').parentNode;\n\n            if ( element ) {\n                var the = KTUtil.data(element).get('menu');\n\n                if ( !the ) {\n                    break;\n                }\n\n                if ( !the || the.getSubmenuMode() !== 'dropdown' ) {\n                    break;\n                }\n\n                if ( e.target !== element && element.contains(e.target) === false ) {\n                    the.hideDropdowns();\n                }\n            }\n        }\n    }\n});\n\n\n//# sourceURL=webpack:///../src/assets/js/global/components/base/menu.js?");

/***/ }),

/***/ "../src/assets/js/global/components/base/offcanvas.js":
/*!************************************************************!*\
  !*** ../src/assets/js/global/components/base/offcanvas.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar KTOffcanvas = function(elementId, options) {\n    // Main object\n    var the = this;\n    var init = false;\n\n    // Get element object\n    var element = KTUtil.get(elementId);\n    var body = KTUtil.get('body');\n\n    if (!element) {\n        return;\n    }\n\n    // Default options\n    var defaultOptions = {};\n\n    ////////////////////////////\n    // ** Private Methods  ** //\n    ////////////////////////////\n\n    var Plugin = {\n        construct: function(options) {\n            if (KTUtil.data(element).has('offcanvas')) {\n                the = KTUtil.data(element).get('offcanvas');\n            } else {\n                // reset offcanvas\n                Plugin.init(options);\n                \n                // build offcanvas\n                Plugin.build();\n\n                KTUtil.data(element).set('offcanvas', the);\n            }\n\n            return the;\n        },\n\n        init: function(options) {\n            the.events = [];\n\n            // merge default and user defined options\n            the.options = KTUtil.deepExtend({}, defaultOptions, options);\n            the.overlay;\n\n            the.classBase = the.options.baseClass;\n            the.classShown = the.classBase + '--on';\n            the.classOverlay = the.classBase + '-overlay';\n\n            the.state = KTUtil.hasClass(element, the.classShown) ? 'shown' : 'hidden';\n        },\n\n        build: function() {\n            // offcanvas toggle\n            if (the.options.toggleBy) {\n                if (typeof the.options.toggleBy === 'string') { \n                    KTUtil.addEvent( the.options.toggleBy, 'click', function(e) {\n                        e.preventDefault();\n                        Plugin.toggle();\n                    }); \n                } else if (the.options.toggleBy && the.options.toggleBy[0]) {\n                    if (the.options.toggleBy[0].target) {\n                        for (var i in the.options.toggleBy) { \n                            KTUtil.addEvent( the.options.toggleBy[i].target, 'click', function(e) {\n                                e.preventDefault();\n                                Plugin.toggle();\n                            }); \n                        }\n                    } else {\n                        for (var i in the.options.toggleBy) { \n                            KTUtil.addEvent( the.options.toggleBy[i], 'click', function(e) {\n                                e.preventDefault();\n                                Plugin.toggle();\n                            }); \n                        }\n                    }\n                    \n                } else if (the.options.toggleBy && the.options.toggleBy.target) {\n                    KTUtil.addEvent( the.options.toggleBy.target, 'click', function(e) {\n                        e.preventDefault();\n                        Plugin.toggle();\n                    }); \n                } \n            }\n\n            // offcanvas close\n            var closeBy = KTUtil.get(the.options.closeBy);\n            if (closeBy) {\n                KTUtil.addEvent(closeBy, 'click', function(e) {\n                    e.preventDefault();\n                    Plugin.hide();\n                });\n            }\n\n            // Window resize\n            KTUtil.addResizeHandler(function() {\n                if (parseInt(KTUtil.css(element, 'left')) >= 0 || parseInt(KTUtil.css(element, 'right') >= 0) || KTUtil.css(element, 'position') != 'fixed') {\n                    KTUtil.css(element, 'opacity', '1');\n                }\n            });\n        },\n\n        isShown: function(target) {\n            return (the.state == 'shown' ? true : false);\n        },\n\n        toggle: function() {;\n            Plugin.eventTrigger('toggle'); \n\n            if (the.state == 'shown') {\n                Plugin.hide(this);\n            } else {\n                Plugin.show(this);\n            }\n        },\n\n        show: function(target) {\n            if (the.state == 'shown') {\n                return;\n            }\n\n            Plugin.eventTrigger('beforeShow');\n\n            Plugin.togglerClass(target, 'show');\n\n            // Offcanvas panel\n            KTUtil.addClass(body, the.classShown);\n            KTUtil.addClass(element, the.classShown);\n            KTUtil.css(element, 'opacity', '1');\n\n            the.state = 'shown';\n\n            if (the.options.overlay) {\n                the.overlay = KTUtil.insertAfter(document.createElement('DIV') , element );\n                KTUtil.addClass(the.overlay, the.classOverlay);\n                KTUtil.addEvent(the.overlay, 'click', function(e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    Plugin.hide(target);       \n                });\n            }\n\n            Plugin.eventTrigger('afterShow');\n        },\n\n        hide: function(target) {\n            if (the.state == 'hidden') {\n                return;\n            }\n\n            Plugin.eventTrigger('beforeHide');\n\n            Plugin.togglerClass(target, 'hide');\n\n            KTUtil.removeClass(body, the.classShown);\n            KTUtil.removeClass(element, the.classShown);\n\n            the.state = 'hidden';\n\n            if (the.options.overlay && the.overlay) {\n                KTUtil.remove(the.overlay);\n            }\n\n            KTUtil.transitionEnd(element, function() {\n                KTUtil.css(element, 'opacity', '0');\n            });\n\n            Plugin.eventTrigger('afterHide');\n        },\n\n        togglerClass: function(target, mode) {\n            // Toggler\n            var id = KTUtil.attr(target, 'id');\n            var toggleBy;\n\n            if (the.options.toggleBy && the.options.toggleBy[0] && the.options.toggleBy[0].target) {\n                for (var i in the.options.toggleBy) {\n                    if (the.options.toggleBy[i].target === id) {\n                        toggleBy = the.options.toggleBy[i];\n                    }        \n                }\n            } else if (the.options.toggleBy && the.options.toggleBy.target) {\n                toggleBy = the.options.toggleBy;\n            }\n\n            if (toggleBy) {                \n                var el = KTUtil.get(toggleBy.target);\n                \n                if (mode === 'show') {\n                    KTUtil.addClass(el, toggleBy.state);\n                }\n\n                if (mode === 'hide') {\n                    KTUtil.removeClass(el, toggleBy.state);\n                }\n            }\n        },\n\n        eventTrigger: function(name, args) {\n            for (var i = 0; i < the.events.length; i++) {\n                var event = the.events[i];\n                if (event.name == name) {\n                    if (event.one == true) {\n                        if (event.fired == false) {\n                            the.events[i].fired = true;\n                            return event.handler.call(this, the, args);\n                        }\n                    } else {\n                        return event.handler.call(this, the, args);\n                    }\n                }\n            }\n        },\n\n        addEvent: function(name, handler, one) {\n            the.events.push({\n                name: name,\n                handler: handler,\n                one: one,\n                fired: false\n            });\n        }\n    };\n\n    //////////////////////////\n    // ** Public Methods ** //\n    //////////////////////////\n    the.setDefaults = function(options) {\n        defaultOptions = options;\n    };\n\n    the.isShown = function() {\n        return Plugin.isShown();\n    };\n\n    the.hide = function() {\n        return Plugin.hide();\n    };\n\n    the.show = function() {\n        return Plugin.show();\n    };\n\n    the.on = function(name, handler) {\n        return Plugin.addEvent(name, handler);\n    };\n\n    the.one = function(name, handler) {\n        return Plugin.addEvent(name, handler, true);\n    };\n\n    ///////////////////////////////\n    // ** Plugin Construction ** //\n    ///////////////////////////////\n\n    // Run plugin\n    Plugin.construct.apply(the, [options]);\n\n    // Init done\n    init = true;\n\n    // Return plugin instance\n    return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n    module.exports = KTOffcanvas;\n}\n\n//# sourceURL=webpack:///../src/assets/js/global/components/base/offcanvas.js?");

/***/ }),
  

/***/ "../src/assets/js/global/components/base/toggle.js":
/*!*********************************************************!*\
  !*** ../src/assets/js/global/components/base/toggle.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// plugin setup\nvar KTToggle = function(elementId, options) {\n    // Main object\n    var the = this;\n    var init = false;\n\n    // Get element object\n    var element = KTUtil.get(elementId);\n    var body = KTUtil.get('body');  \n\n    if (!element) {\n        return;\n    }\n\n    // Default options\n    var defaultOptions = {\n        togglerState: '',\n        targetState: ''\n    };    \n\n    ////////////////////////////\n    // ** Private Methods  ** //\n    ////////////////////////////\n\n    var Plugin = {\n        /**\n         * Construct\n         */\n\n        construct: function(options) {\n            if (KTUtil.data(element).has('toggle')) {\n                the = KTUtil.data(element).get('toggle');\n            } else {\n                // reset menu\n                Plugin.init(options);\n\n                // build menu\n                Plugin.build();\n\n                KTUtil.data(element).set('toggle', the);\n            }\n\n            return the;\n        },\n\n        /**\n         * Handles subtoggle click toggle\n         */\n        init: function(options) {\n            the.element = element;\n            the.events = [];\n\n            // merge default and user defined options\n            the.options = KTUtil.deepExtend({}, defaultOptions, options);\n\n            the.target = KTUtil.get(the.options.target);\n            the.targetState = the.options.targetState;\n            the.togglerState = the.options.togglerState;\n\n            the.state = KTUtil.hasClasses(the.target, the.targetState) ? 'on' : 'off';\n        },\n\n        /**\n         * Setup toggle\n         */\n        build: function() {\n            KTUtil.addEvent(element, 'mouseup', Plugin.toggle);\n        },\n        \n        /**\n         * Handles offcanvas click toggle\n         */\n        toggle: function(e) {\n            Plugin.eventTrigger('beforeToggle');\n\n            if (the.state == 'off') {\n                Plugin.toggleOn();\n            } else {\n                Plugin.toggleOff();\n            }\n\n            Plugin.eventTrigger('afterToggle');\n\n            e.preventDefault();\n\n            return the;\n        },\n\n        /**\n         * Handles toggle click toggle\n         */\n        toggleOn: function() {\n            Plugin.eventTrigger('beforeOn');\n\n            KTUtil.addClass(the.target, the.targetState);\n\n            if (the.togglerState) {\n                KTUtil.addClass(element, the.togglerState);\n            }\n\n            the.state = 'on';\n\n            Plugin.eventTrigger('afterOn');\n\n            Plugin.eventTrigger('toggle');\n\n            return the;\n        },\n\n        /**\n         * Handles toggle click toggle\n         */\n        toggleOff: function() {\n            Plugin.eventTrigger('beforeOff');\n\n            KTUtil.removeClass(the.target, the.targetState);\n\n            if (the.togglerState) {\n                KTUtil.removeClass(element, the.togglerState);\n            }\n\n            the.state = 'off';\n\n            Plugin.eventTrigger('afterOff');\n\n            Plugin.eventTrigger('toggle');\n\n            return the;\n        },\n\n        /**\n         * Trigger events\n         */\n        eventTrigger: function(name) {\n            for (var i = 0; i < the.events.length; i++) {\n                var event = the.events[i];\n\n                if (event.name == name) {\n                    if (event.one == true) {\n                        if (event.fired == false) {\n                            the.events[i].fired = true;                            \n                            return event.handler.call(this, the);\n                        }\n                    } else {\n                        return event.handler.call(this, the);\n                    }\n                }\n            }\n        },\n\n        addEvent: function(name, handler, one) {\n            the.events.push({\n                name: name,\n                handler: handler,\n                one: one,\n                fired: false\n            });\n\n            return the;\n        }\n    };\n\n    //////////////////////////\n    // ** Public Methods ** //\n    //////////////////////////\n\n    /**\n     * Set default options \n     */\n\n    the.setDefaults = function(options) {\n        defaultOptions = options;\n    };\n\n    /**\n     * Get toggle state \n     */\n    the.getState = function() {\n        return the.state;\n    };\n\n    /**\n     * Toggle \n     */\n    the.toggle = function() {\n        return Plugin.toggle();\n    };\n\n    /**\n     * Toggle on \n     */\n    the.toggleOn = function() {\n        return Plugin.toggleOn();\n    };\n\n    /**\n     * Toggle off \n     */\n    the.toggleOff = function() {\n        return Plugin.toggleOff();\n    };\n\n    /**\n     * Attach event\n     * @returns {KTToggle}\n     */\n    the.on = function(name, handler) {\n        return Plugin.addEvent(name, handler);\n    };\n\n    /**\n     * Attach event that will be fired once\n     * @returns {KTToggle}\n     */\n    the.one = function(name, handler) {\n        return Plugin.addEvent(name, handler, true);\n    };\n\n    // Construct plugin\n    Plugin.construct.apply(the, [options]);\n\n    return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n    module.exports = KTToggle;\n}\n\n//# sourceURL=webpack:///../src/assets/js/global/components/base/toggle.js?");

/***/ }),

/***/ "../src/assets/js/global/components/base/util.js":
/*!*******************************************************!*\
  !*** ../src/assets/js/global/components/base/util.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @class KTUtil  base utilize class that privides helper functions\n */\n\n// Polyfills\n/**\n * Element.matches() polyfill (simple version)\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n */\nif (!Element.prototype.matches) {\n\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n\n/**\n * Element.closest() polyfill\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\n */\nif (!Element.prototype.closest) {\n\tif (!Element.prototype.matches) {\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\t}\n\tElement.prototype.closest = function (s) {\n\t\tvar el = this;\n\t\tvar ancestor = this;\n\t\tif (!document.documentElement.contains(el)) return null;\n\t\tdo {\n\t\t\tif (ancestor.matches(s)) return ancestor;\n\t\t\tancestor = ancestor.parentElement;\n\t\t} while (ancestor !== null);\n\t\treturn null;\n\t};\n}\n\n/**\n * ChildNode.remove() polyfill\n * https://gomakethings.com/removing-an-element-from-the-dom-the-es6-way/\n * @author Chris Ferdinandi\n * @license MIT\n */\n(function (elem) {\n\tfor (var i = 0; i < elem.length; i++) {\n\t\tif (!window[elem[i]] || 'remove' in window[elem[i]].prototype) continue;\n\t\twindow[elem[i]].prototype.remove = function () {\n\t\t\tthis.parentNode.removeChild(this);\n\t\t};\n\t}\n})(['Element', 'CharacterData', 'DocumentType']);\n\n//\n// requestAnimationFrame polyfill by Erik Möller.\n//  With fixes from Paul Irish and Tino Zijdel\n//\n//  http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n//  http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n//\n//  MIT license\n//\n(function() {\n    var lastTime = 0;\n    var vendors = ['webkit', 'moz'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame =\n            window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame)\n        window.requestAnimationFrame = function(callback) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n\n    if (!window.cancelAnimationFrame)\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n}());\n\n// Source: https://github.com/jserz/js_piece/blob/master/DOM/ParentNode/prepend()/prepend().md\n(function(arr) {\n    arr.forEach(function(item) {\n        if (item.hasOwnProperty('prepend')) {\n            return;\n        }\n        Object.defineProperty(item, 'prepend', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: function prepend() {\n                var argArr = Array.prototype.slice.call(arguments),\n                    docFrag = document.createDocumentFragment();\n\n                argArr.forEach(function(argItem) {\n                    var isNode = argItem instanceof Node;\n                    docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n                });\n\n                this.insertBefore(docFrag, this.firstChild);\n            }\n        });\n    });\n})([Element.prototype, Document.prototype, DocumentFragment.prototype]);\n\n// Global variables\nwindow.KTUtilElementDataStore = {};\nwindow.KTUtilElementDataStoreID = 0;\nwindow.KTUtilDelegatedEventHandlers = {};\n\nvar KTUtil = function() {\n    var resizeHandlers = [];\n\n    /** @type {object} breakpoints The device width breakpoints **/\n    var breakpoints = {\n        sm: 544, // Small screen / phone\n        md: 768, // Medium screen / tablet\n        lg: 1024, // Large screen / desktop\n        xl: 1200 // Extra large screen / wide desktop\n    };\n\n    /**\n     * Handle window resize event with some\n     * delay to attach event handlers upon resize complete\n     */\n    var _windowResizeHandler = function() {\n        var _runResizeHandlers = function() {\n            // reinitialize other subscribed elements\n            for (var i = 0; i < resizeHandlers.length; i++) {\n                var each = resizeHandlers[i];\n                each.call();\n            }\n        };\n\n        var timeout = false; // holder for timeout id\n        var delay = 250; // delay after event is \"complete\" to run callback\n\n        window.addEventListener('resize', function() {\n            clearTimeout(timeout);\n            timeout = setTimeout(function() {\n                _runResizeHandlers();\n            }, delay); // wait 50ms until window resize finishes.\n        });\n    };\n\n    return {\n        /**\n         * Class main initializer.\n         * @param {object} options.\n         * @returns null\n         */\n        //main function to initiate the theme\n        init: function(options) {\n            if (options && options.breakpoints) {\n                breakpoints = options.breakpoints;\n            }\n\n            _windowResizeHandler();\n        },\n\n        /**\n         * Adds window resize event handler.\n         * @param {function} callback function.\n         */\n        addResizeHandler: function(callback) {\n            resizeHandlers.push(callback);\n        },\n\n        /**\n         * Removes window resize event handler.\n         * @param {function} callback function.\n         */\n        removeResizeHandler: function(callback) {\n            for (var i = 0; i < resizeHandlers.length; i++) {\n                if (callback === resizeHandlers[i]) {\n                    delete resizeHandlers[i];\n                }\n            }\n        },\n\n        /**\n         * Trigger window resize handlers.\n         */\n        runResizeHandlers: function() {\n            _runResizeHandlers();\n        },\n\n        resize: function() {\n            if (typeof(Event) === 'function') {\n                // modern browsers\n                window.dispatchEvent(new Event('resize'));\n            } else {\n                // for IE and other old browsers\n                // causes deprecation warning on modern browsers\n                var evt = window.document.createEvent('UIEvents');\n                evt.initUIEvent('resize', true, false, window, 0);\n                window.dispatchEvent(evt);\n            }\n        },\n\n        /**\n         * Get GET parameter value from URL.\n         * @param {string} paramName Parameter name.\n         * @returns {string}\n         */\n        getURLParam: function(paramName) {\n            var searchString = window.location.search.substring(1),\n                i, val, params = searchString.split(\"&\");\n\n            for (i = 0; i < params.length; i++) {\n                val = params[i].split(\"=\");\n                if (val[0] == paramName) {\n                    return unescape(val[1]);\n                }\n            }\n\n            return null;\n        },\n\n        /**\n         * Checks whether current device is mobile touch.\n         * @returns {boolean}\n         */\n        isMobileDevice: function() {\n            return (this.getViewPort().width < this.getBreakpoint('lg') ? true : false);\n        },\n\n        /**\n         * Checks whether current device is desktop.\n         * @returns {boolean}\n         */\n        isDesktopDevice: function() {\n            return KTUtil.isMobileDevice() ? false : true;\n        },\n\n        /**\n         * Gets browser window viewport size. Ref:\n         * http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/\n         * @returns {object}\n         */\n        getViewPort: function() {\n            var e = window,\n                a = 'inner';\n            if (!('innerWidth' in window)) {\n                a = 'client';\n                e = document.documentElement || document.body;\n            }\n\n            return {\n                width: e[a + 'Width'],\n                height: e[a + 'Height']\n            };\n        },\n\n        /**\n         * Checks whether given device mode is currently activated.\n         * @param {string} mode Responsive mode name(e.g: desktop,\n         *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)\n         * @returns {boolean}\n         */\n        isInResponsiveRange: function(mode) {\n            var breakpoint = this.getViewPort().width;\n\n            if (mode == 'general') {\n                return true;\n            } else if (mode == 'desktop' && breakpoint >= (this.getBreakpoint('lg') + 1)) {\n                return true;\n            } else if (mode == 'tablet' && (breakpoint >= (this.getBreakpoint('md') + 1) && breakpoint < this.getBreakpoint('lg'))) {\n                return true;\n            } else if (mode == 'mobile' && breakpoint <= this.getBreakpoint('md')) {\n                return true;\n            } else if (mode == 'desktop-and-tablet' && breakpoint >= (this.getBreakpoint('md') + 1)) {\n                return true;\n            } else if (mode == 'tablet-and-mobile' && breakpoint <= this.getBreakpoint('lg')) {\n                return true;\n            } else if (mode == 'minimal-desktop-and-below' && breakpoint <= this.getBreakpoint('xl')) {\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Generates unique ID for give prefix.\n         * @param {string} prefix Prefix for generated ID\n         * @returns {boolean}\n         */\n        getUniqueID: function(prefix) {\n            return prefix + Math.floor(Math.random() * (new Date()).getTime());\n        },\n\n        /**\n         * Gets window width for give breakpoint mode.\n         * @param {string} mode Responsive mode name(e.g: xl, lg, md, sm)\n         * @returns {number}\n         */\n        getBreakpoint: function(mode) {\n            return breakpoints[mode];\n        },\n\n        /**\n         * Checks whether object has property matchs given key path.\n         * @param {object} obj Object contains values paired with given key path\n         * @param {string} keys Keys path seperated with dots\n         * @returns {object}\n         */\n        isset: function(obj, keys) {\n            var stone;\n\n            keys = keys || '';\n\n            if (keys.indexOf('[') !== -1) {\n                throw new Error('Unsupported object path notation.');\n            }\n\n            keys = keys.split('.');\n\n            do {\n                if (obj === undefined) {\n                    return false;\n                }\n\n                stone = keys.shift();\n\n                if (!obj.hasOwnProperty(stone)) {\n                    return false;\n                }\n\n                obj = obj[stone];\n\n            } while (keys.length);\n\n            return true;\n        },\n\n        /**\n         * Gets highest z-index of the given element parents\n         * @param {object} el jQuery element object\n         * @returns {number}\n         */\n        getHighestZindex: function(el) {\n            var elem = KTUtil.get(el),\n                position, value;\n\n            while (elem && elem !== document) {\n                // Ignore z-index if position is set to a value where z-index is ignored by the browser\n                // This makes behavior of this function consistent across browsers\n                // WebKit always returns auto if the element is positioned\n                position = KTUtil.css(elem, 'position');\n\n                if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n                    // IE returns 0 when zIndex is not specified\n                    // other browsers return a string\n                    // we ignore the case of nested elements with an explicit value of 0\n                    // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n                    value = parseInt(KTUtil.css(elem, 'z-index'));\n\n                    if (!isNaN(value) && value !== 0) {\n                        return value;\n                    }\n                }\n\n                elem = elem.parentNode;\n            }\n\n            return null;\n        },\n\n        /**\n         * Checks whether the element has any parent with fixed positionfreg\n         * @param {object} el jQuery element object\n         * @returns {boolean}\n         */\n        hasFixedPositionedParent: function(el) {\n            var position;\n\n            while (el && el !== document) {\n                position = KTUtil.css(el, 'position');\n\n                if (position === \"fixed\") {\n                    return true;\n                }\n\n                el = el.parentNode;\n            }\n\n            return false;\n        },\n\n        /**\n         * Simulates delay\n         */\n        sleep: function(milliseconds) {\n            var start = new Date().getTime();\n            for (var i = 0; i < 1e7; i++) {\n                if ((new Date().getTime() - start) > milliseconds) {\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Gets randomly generated integer value within given min and max range\n         * @param {number} min Range start value\n         * @param {number} max Range end value\n         * @returns {number}\n         */\n        getRandomInt: function(min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        },\n\n        /**\n         * Checks whether Angular library is included\n         * @returns {boolean}\n         */\n        isAngularVersion: function() {\n            return window.Zone !== undefined ? true : false;\n        },\n\n        // jQuery Workarounds\n\n        // Deep extend:  $.extend(true, {}, objA, objB);\n        deepExtend: function(out) {\n            out = out || {};\n\n            for (var i = 1; i < arguments.length; i++) {\n                var obj = arguments[i];\n\n                if (!obj)\n                    continue;\n\n                for (var key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        if (typeof obj[key] === 'object')\n                            out[key] = KTUtil.deepExtend(out[key], obj[key]);\n                        else\n                            out[key] = obj[key];\n                    }\n                }\n            }\n\n            return out;\n        },\n\n        // extend:  $.extend({}, objA, objB);\n        extend: function(out) {\n            out = out || {};\n\n            for (var i = 1; i < arguments.length; i++) {\n                if (!arguments[i])\n                    continue;\n\n                for (var key in arguments[i]) {\n                    if (arguments[i].hasOwnProperty(key))\n                        out[key] = arguments[i][key];\n                }\n            }\n\n            return out;\n        },\n\n        get: function(query) {\n            var el;\n\n            if (query === document) {\n                return document;\n            }\n\n            if (!!(query && query.nodeType === 1)) {\n                return query;\n            }\n\n            if (el = document.getElementById(query)) {\n                return el;\n            } else if (el = document.getElementsByTagName(query)) {\n                return el[0];\n            } else if (el = document.getElementsByClassName(query)) {\n                return el[0];\n            } else {\n                return null;\n            }\n        },\n\n        getByID: function(query) {\n            if (!!(query && query.nodeType === 1)) {\n                return query;\n            }\n\n            return document.getElementById(query);\n        },\n\n        getByTag: function(query) {\n            var el;\n\n            if (el = document.getElementsByTagName(query)) {\n                return el[0];\n            } else {\n                return null;\n            }\n        },\n\n        getByClass: function(query) {\n            var el;\n\n            if (el = document.getElementsByClassName(query)) {\n                return el[0];\n            } else {\n                return null;\n            }\n        },\n\n        /**\n         * Checks whether the element has given classes\n         * @param {object} el jQuery element object\n         * @param {string} Classes string\n         * @returns {boolean}\n         */\n        hasClasses: function(el, classes) {\n            if (!el) {\n                return;\n            }\n\n            var classesArr = classes.split(\" \");\n\n            for (var i = 0; i < classesArr.length; i++) {\n                if (KTUtil.hasClass(el, KTUtil.trim(classesArr[i])) == false) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        hasClass: function(el, className) {\n            if (!el) {\n                return;\n            }\n\n            return el.classList ? el.classList.contains(className) : new RegExp('\\\\b' + className + '\\\\b').test(el.className);\n        },\n\n        addClass: function(el, className) {\n            if (!el || typeof className === 'undefined') {\n                return;\n            }\n\n            var classNames = className.split(' ');\n\n            if (el.classList) {\n                for (var i = 0; i < classNames.length; i++) {\n                    if (classNames[i] && classNames[i].length > 0) {\n                        el.classList.add(KTUtil.trim(classNames[i]));\n                    }\n                }\n            } else if (!KTUtil.hasClass(el, className)) {\n                for (var x = 0; x < classNames.length; x++) {\n                    el.className += ' ' + KTUtil.trim(classNames[x]);\n                }\n            }\n        },\n\n        removeClass: function(el, className) {\n          if (!el || typeof className === 'undefined') {\n                return;\n            }\n\n            var classNames = className.split(' ');\n\n            if (el.classList) {\n                for (var i = 0; i < classNames.length; i++) {\n                    el.classList.remove(KTUtil.trim(classNames[i]));\n                }\n            } else if (KTUtil.hasClass(el, className)) {\n                for (var x = 0; x < classNames.length; x++) {\n                    el.className = el.className.replace(new RegExp('\\\\b' + KTUtil.trim(classNames[x]) + '\\\\b', 'g'), '');\n                }\n            }\n        },\n\n        triggerCustomEvent: function(el, eventName, data) {\n            var event;\n            if (window.CustomEvent) {\n                event = new CustomEvent(eventName, {\n                    detail: data\n                });\n            } else {\n                event = document.createEvent('CustomEvent');\n                event.initCustomEvent(eventName, true, true, data);\n            }\n\n            el.dispatchEvent(event);\n        },\n\n        triggerEvent: function(node, eventName) {\n            // Make sure we use the ownerDocument from the provided node to avoid cross-window problems\n            var doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                var eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                case \"mouseenter\":\n                case \"mouseleave\":\n                case \"mousedown\":\n                case \"mouseup\":\n                    eventClass = \"MouseEvents\";\n                    break;\n\n                case \"focus\":\n                case \"change\":\n                case \"blur\":\n                case \"select\":\n                    eventClass = \"HTMLEvents\";\n                    break;\n\n                default:\n                    throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                    break;\n                }\n                var event = doc.createEvent(eventClass);\n\n                var bubbles = eventName == \"change\" ? false : true;\n                event.initEvent(eventName, bubbles, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event, true);\n            } else if (node.fireEvent) {\n                // IE-old school style\n                var event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                node.fireEvent(\"on\" + eventName, event);\n            }\n        },\n\n        index: function( elm ){\n            elm = KTUtil.get(elm);\n            var c = elm.parentNode.children, i = 0;\n            for(; i < c.length; i++ )\n                if( c[i] == elm ) return i;\n        },\n\n        trim: function(string) {\n            return string.trim();\n        },\n\n        eventTriggered: function(e) {\n            if (e.currentTarget.dataset.triggered) {\n                return true;\n            } else {\n                e.currentTarget.dataset.triggered = true;\n\n                return false;\n            }\n        },\n\n        remove: function(el) {\n            if (el && el.parentNode) {\n                el.parentNode.removeChild(el);\n            }\n        },\n\n        find: function(parent, query) {\n            parent = KTUtil.get(parent);\n            if (parent) {\n                return parent.querySelector(query);\n            }\n        },\n\n        findAll: function(parent, query) {\n            parent = KTUtil.get(parent);\n            if (parent) {\n                return parent.querySelectorAll(query);\n            }\n        },\n\n        insertAfter: function(el, referenceNode) {\n            return referenceNode.parentNode.insertBefore(el, referenceNode.nextSibling);\n        },\n\n        parents: function(elem, selector) {\n            // Element.matches() polyfill\n            if (!Element.prototype.matches) {\n                Element.prototype.matches =\n                    Element.prototype.matchesSelector ||\n                    Element.prototype.mozMatchesSelector ||\n                    Element.prototype.msMatchesSelector ||\n                    Element.prototype.oMatchesSelector ||\n                    Element.prototype.webkitMatchesSelector ||\n                    function(s) {\n                        var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                            i = matches.length;\n                        while (--i >= 0 && matches.item(i) !== this) {}\n                        return i > -1;\n                    };\n            }\n\n            // Set up a parent array\n            var parents = [];\n\n            // Push each parent element to the array\n            for ( ; elem && elem !== document; elem = elem.parentNode ) {\n                if (selector) {\n                    if (elem.matches(selector)) {\n                        parents.push(elem);\n                    }\n                    continue;\n                }\n                parents.push(elem);\n            }\n\n            // Return our parent array\n            return parents;\n        },\n\n        children: function(el, selector, log) {\n            if (!el || !el.childNodes) {\n                return;\n            }\n\n            var result = [],\n                i = 0,\n                l = el.childNodes.length;\n\n            for (var i; i < l; ++i) {\n                if (el.childNodes[i].nodeType == 1 && KTUtil.matches(el.childNodes[i], selector, log)) {\n                    result.push(el.childNodes[i]);\n                }\n            }\n\n            return result;\n        },\n\n        child: function(el, selector, log) {\n            var children = KTUtil.children(el, selector, log);\n\n            return children ? children[0] : null;\n        },\n\n        matches: function(el, selector, log) {\n            var p = Element.prototype;\n            var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function(s) {\n                return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n            };\n\n            if (el && el.tagName) {\n                return f.call(el, selector);\n            } else {\n                return false;\n            }\n        },\n\n        data: function(element) {\n            element = KTUtil.get(element);\n\n            return {\n                set: function(name, data) {\n                    if (element === undefined) {\n                        return;\n                    }\n\n                    if (element.customDataTag === undefined) {\n                        window.KTUtilElementDataStoreID++;\n                        element.customDataTag = window.KTUtilElementDataStoreID;\n                    }\n\n                    if (window.KTUtilElementDataStore[element.customDataTag] === undefined) {\n                        window.KTUtilElementDataStore[element.customDataTag] = {};\n                    }\n\n                    window.KTUtilElementDataStore[element.customDataTag][name] = data;\n                },\n\n                get: function(name) {\n                    if (element === undefined) {\n                        return;\n                    }\n\n                    if (element.customDataTag === undefined) {\n                        return null;\n                    }\n\n                    return this.has(name) ? window.KTUtilElementDataStore[element.customDataTag][name] : null;\n                },\n\n                has: function(name) {\n                    if (element === undefined) {\n                        return false;\n                    }\n\n                    if (element.customDataTag === undefined) {\n                        return false;\n                    }\n\n                    return (window.KTUtilElementDataStore[element.customDataTag] && window.KTUtilElementDataStore[element.customDataTag][name]) ? true : false;\n                },\n\n                remove: function(name) {\n                    if (element && this.has(name)) {\n                        delete window.KTUtilElementDataStore[element.customDataTag][name];\n                    }\n                }\n            };\n        },\n\n        outerWidth: function(el, margin) {\n            var width;\n\n            if (margin === true) {\n                width = parseFloat(el.offsetWidth);\n                width += parseFloat(KTUtil.css(el, 'margin-left')) + parseFloat(KTUtil.css(el, 'margin-right'));\n\n                return parseFloat(width);\n            } else {\n                width = parseFloat(el.offsetWidth);\n\n                return width;\n            }\n        },\n\n        offset: function(elem) {\n            var rect, win;\n            elem = KTUtil.get(elem);\n\n            if ( !elem ) {\n                return;\n            }\n\n            // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n            // Support: IE <=11 only\n            // Running getBoundingClientRect on a\n            // disconnected node in IE throws an error\n\n            if ( !elem.getClientRects().length ) {\n                return { top: 0, left: 0 };\n            }\n\n            // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n            rect = elem.getBoundingClientRect();\n            win = elem.ownerDocument.defaultView;\n\n            return {\n                top: rect.top + win.pageYOffset,\n                left: rect.left + win.pageXOffset\n            };\n        },\n\n        height: function(el) {\n            return KTUtil.css(el, 'height');\n        },\n\n        visible: function(el) {\n            return !(el.offsetWidth === 0 && el.offsetHeight === 0);\n        },\n\n        attr: function(el, name, value) {\n            el = KTUtil.get(el);\n\n            if (el == undefined) {\n                return;\n            }\n\n            if (value !== undefined) {\n                el.setAttribute(name, value);\n            } else {\n                return el.getAttribute(name);\n            }\n        },\n\n        hasAttr: function(el, name) {\n            el = KTUtil.get(el);\n\n            if (el == undefined) {\n                return;\n            }\n\n            return el.getAttribute(name) ? true : false;\n        },\n\n        removeAttr: function(el, name) {\n            el = KTUtil.get(el);\n\n            if (el == undefined) {\n                return;\n            }\n\n            el.removeAttribute(name);\n        },\n\n        animate: function(from, to, duration, update, easing, done) {\n            /**\n             * TinyAnimate.easings\n             *  Adapted from jQuery Easing\n             */\n            var easings = {};\n            var easing;\n\n            easings.linear = function(t, b, c, d) {\n                return c * t / d + b;\n            };\n\n            easing = easings.linear;\n\n            // Early bail out if called incorrectly\n            if (typeof from !== 'number' ||\n                typeof to !== 'number' ||\n                typeof duration !== 'number' ||\n                typeof update !== 'function') {\n                return;\n            }\n\n            // Create mock done() function if necessary\n            if (typeof done !== 'function') {\n                done = function() {};\n            }\n\n            // Pick implementation (requestAnimationFrame | setTimeout)\n            var rAF = window.requestAnimationFrame || function(callback) {\n                window.setTimeout(callback, 1000 / 50);\n            };\n\n            // Animation loop\n            var canceled = false;\n            var change = to - from;\n\n            function loop(timestamp) {\n                var time = (timestamp || +new Date()) - start;\n\n                if (time >= 0) {\n                    update(easing(time, from, change, duration));\n                }\n                if (time >= 0 && time >= duration) {\n                    update(to);\n                    done();\n                } else {\n                    rAF(loop);\n                }\n            }\n\n            update(from);\n\n            // Start animation loop\n            var start = window.performance && window.performance.now ? window.performance.now() : +new Date();\n\n            rAF(loop);\n        },\n\n        actualCss: function(el, prop, cache) {\n            el = KTUtil.get(el);\n            var css = '';\n\n            if (el instanceof HTMLElement === false) {\n                return;\n            }\n\n            if (!el.getAttribute('kt-hidden-' + prop) || cache === false) {\n                var value;\n\n                // the element is hidden so:\n                // making the el block so we can meassure its height but still be hidden\n                css = el.style.cssText;\n                el.style.cssText = 'position: absolute; visibility: hidden; display: block;';\n\n                if (prop == 'width') {\n                    value = el.offsetWidth;\n                } else if (prop == 'height') {\n                    value = el.offsetHeight;\n                }\n\n                el.style.cssText = css;\n\n                // store it in cache\n                el.setAttribute('kt-hidden-' + prop, value);\n\n                return parseFloat(value);\n            } else {\n                // store it in cache\n                return parseFloat(el.getAttribute('kt-hidden-' + prop));\n            }\n        },\n\n        actualHeight: function(el, cache) {\n            return KTUtil.actualCss(el, 'height', cache);\n        },\n\n        actualWidth: function(el, cache) {\n            return KTUtil.actualCss(el, 'width', cache);\n        },\n\n        getScroll: function(element, method) {\n            // The passed in `method` value should be 'Top' or 'Left'\n            method = 'scroll' + method;\n            return (element == window || element == document) ? (\n                self[(method == 'scrollTop') ? 'pageYOffset' : 'pageXOffset'] ||\n                (browserSupportsBoxModel && document.documentElement[method]) ||\n                document.body[method]\n            ) : element[method];\n        },\n\n        css: function(el, styleProp, value) {\n            el = KTUtil.get(el);\n\n            if (!el) {\n                return;\n            }\n\n            if (value !== undefined) {\n                el.style[styleProp] = value;\n            } else {\n                var defaultView = (el.ownerDocument || document).defaultView;\n                // W3C standard way:\n                if (defaultView && defaultView.getComputedStyle) {\n                    // sanitize property name to css notation\n                    // (hyphen separated words eg. font-Size)\n                    styleProp = styleProp.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n                    return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n                } else if (el.currentStyle) { // IE\n                    // sanitize property name to camelCase\n                    styleProp = styleProp.replace(/\\-(\\w)/g, function(str, letter) {\n                        return letter.toUpperCase();\n                    });\n                    value = el.currentStyle[styleProp];\n                    // convert other units to pixels on IE\n                    if (/^\\d+(em|pt|%|ex)?$/i.test(value)) {\n                        return (function(value) {\n                            var oldLeft = el.style.left,\n                                oldRsLeft = el.runtimeStyle.left;\n                            el.runtimeStyle.left = el.currentStyle.left;\n                            el.style.left = value || 0;\n                            value = el.style.pixelLeft + \"px\";\n                            el.style.left = oldLeft;\n                            el.runtimeStyle.left = oldRsLeft;\n                            return value;\n                        })(value);\n                    }\n                    return value;\n                }\n            }\n        },\n\n        slide: function(el, dir, speed, callback, recalcMaxHeight) {\n            if (!el || (dir == 'up' && KTUtil.visible(el) === false) || (dir == 'down' && KTUtil.visible(el) === true)) {\n                return;\n            }\n\n            speed = (speed ? speed : 600);\n            var calcHeight = KTUtil.actualHeight(el);\n            var calcPaddingTop = false;\n            var calcPaddingBottom = false;\n\n            if (KTUtil.css(el, 'padding-top') && KTUtil.data(el).has('slide-padding-top') !== true) {\n                KTUtil.data(el).set('slide-padding-top', KTUtil.css(el, 'padding-top'));\n            }\n\n            if (KTUtil.css(el, 'padding-bottom') && KTUtil.data(el).has('slide-padding-bottom') !== true) {\n                KTUtil.data(el).set('slide-padding-bottom', KTUtil.css(el, 'padding-bottom'));\n            }\n\n            if (KTUtil.data(el).has('slide-padding-top')) {\n                calcPaddingTop = parseInt(KTUtil.data(el).get('slide-padding-top'));\n            }\n\n            if (KTUtil.data(el).has('slide-padding-bottom')) {\n                calcPaddingBottom = parseInt(KTUtil.data(el).get('slide-padding-bottom'));\n            }\n\n            if (dir == 'up') { // up\n                el.style.cssText = 'display: block; overflow: hidden;';\n\n                if (calcPaddingTop) {\n                    KTUtil.animate(0, calcPaddingTop, speed, function(value) {\n                        el.style.paddingTop = (calcPaddingTop - value) + 'px';\n                    }, 'linear');\n                }\n\n                if (calcPaddingBottom) {\n                    KTUtil.animate(0, calcPaddingBottom, speed, function(value) {\n                        el.style.paddingBottom = (calcPaddingBottom - value) + 'px';\n                    }, 'linear');\n                }\n\n                KTUtil.animate(0, calcHeight, speed, function(value) {\n                    el.style.height = (calcHeight - value) + 'px';\n                }, 'linear', function() {\n                    callback();\n                    el.style.height = '';\n                    el.style.display = 'none';\n                });\n\n\n            } else if (dir == 'down') { // down\n                el.style.cssText = 'display: block; overflow: hidden;';\n\n                if (calcPaddingTop) {\n                    KTUtil.animate(0, calcPaddingTop, speed, function(value) {\n                        el.style.paddingTop = value + 'px';\n                    }, 'linear', function() {\n                        el.style.paddingTop = '';\n                    });\n                }\n\n                if (calcPaddingBottom) {\n                    KTUtil.animate(0, calcPaddingBottom, speed, function(value) {\n                        el.style.paddingBottom = value + 'px';\n                    }, 'linear', function() {\n                        el.style.paddingBottom = '';\n                    });\n                }\n\n                KTUtil.animate(0, calcHeight, speed, function(value) {\n                    el.style.height = value + 'px';\n                }, 'linear', function() {\n                    callback();\n                    el.style.height = '';\n                    el.style.display = '';\n                    el.style.overflow = '';\n                });\n            }\n        },\n\n        slideUp: function(el, speed, callback) {\n            KTUtil.slide(el, 'up', speed, callback);\n        },\n\n        slideDown: function(el, speed, callback) {\n            KTUtil.slide(el, 'down', speed, callback);\n        },\n\n        show: function(el, display) {\n            if (typeof el !== 'undefined') {\n                el.style.display = (display ? display : 'block');\n            }\n        },\n\n        hide: function(el) {\n            if (typeof el !== 'undefined') {\n                el.style.display = 'none';\n            }\n        },\n\n        addEvent: function(el, type, handler, one) {\n            el = KTUtil.get(el);\n            if (typeof el !== 'undefined') {\n                el.addEventListener(type, handler);\n            }\n        },\n\n        removeEvent: function(el, type, handler) {\n            el = KTUtil.get(el);\n            el.removeEventListener(type, handler);\n        },\n\n        on: function(element, selector, event, handler) {\n            if (!selector) {\n                return;\n            }\n\n            var eventId = KTUtil.getUniqueID('event');\n\n            window.KTUtilDelegatedEventHandlers[eventId] = function(e) {\n                var targets = element.querySelectorAll(selector);\n                var target = e.target;\n\n                while (target && target !== element) {\n                    for (var i = 0, j = targets.length; i < j; i++) {\n                        if (target === targets[i]) {\n                            handler.call(target, e);\n                        }\n                    }\n\n                    target = target.parentNode;\n                }\n            }\n\n            KTUtil.addEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n\n            return eventId;\n        },\n\n        off: function(element, event, eventId) {\n            if (!element || !window.KTUtilDelegatedEventHandlers[eventId]) {\n                return;\n            }\n\n            KTUtil.removeEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n\n            delete window.KTUtilDelegatedEventHandlers[eventId];\n        },\n\n        one: function onetime(el, type, callback) {\n            el = KTUtil.get(el);\n\n            el.addEventListener(type, function callee(e) {\n                // remove event\n                if (e.target && e.target.removeEventListener) {\n                    e.target.removeEventListener(e.type, callee);\n                }\n\n                // call handler\n                return callback(e);\n            });\n        },\n\n        hash: function(str) {\n            var hash = 0,\n                i, chr;\n\n            if (str.length === 0) return hash;\n            for (i = 0; i < str.length; i++) {\n                chr = str.charCodeAt(i);\n                hash = ((hash << 5) - hash) + chr;\n                hash |= 0; // Convert to 32bit integer\n            }\n\n            return hash;\n        },\n\n        animateClass: function(el, animationName, callback) {\n            var animation;\n            var animations = {\n                animation: 'animationend',\n                OAnimation: 'oAnimationEnd',\n                MozAnimation: 'mozAnimationEnd',\n                WebkitAnimation: 'webkitAnimationEnd',\n                msAnimation: 'msAnimationEnd',\n            };\n\n            for (var t in animations) {\n                if (el.style[t] !== undefined) {\n                    animation = animations[t];\n                }\n            }\n\n            KTUtil.addClass(el, 'animated ' + animationName);\n\n            KTUtil.one(el, animation, function() {\n                KTUtil.removeClass(el, 'animated ' + animationName);\n            });\n\n            if (callback) {\n                KTUtil.one(el, animation, callback);\n            }\n        },\n\n        transitionEnd: function(el, callback) {\n            var transition;\n            var transitions = {\n                transition: 'transitionend',\n                OTransition: 'oTransitionEnd',\n                MozTransition: 'mozTransitionEnd',\n                WebkitTransition: 'webkitTransitionEnd',\n                msTransition: 'msTransitionEnd'\n            };\n\n            for (var t in transitions) {\n                if (el.style[t] !== undefined) {\n                    transition = transitions[t];\n                }\n            }\n\n            KTUtil.one(el, transition, callback);\n        },\n\n        animationEnd: function(el, callback) {\n            var animation;\n            var animations = {\n                animation: 'animationend',\n                OAnimation: 'oAnimationEnd',\n                MozAnimation: 'mozAnimationEnd',\n                WebkitAnimation: 'webkitAnimationEnd',\n                msAnimation: 'msAnimationEnd'\n            };\n\n            for (var t in animations) {\n                if (el.style[t] !== undefined) {\n                    animation = animations[t];\n                }\n            }\n\n            KTUtil.one(el, animation, callback);\n        },\n\n        animateDelay: function(el, value) {\n            var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n            for (var i = 0; i < vendors.length; i++) {\n                KTUtil.css(el, vendors[i] + 'animation-delay', value);\n            }\n        },\n\n        animateDuration: function(el, value) {\n            var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n            for (var i = 0; i < vendors.length; i++) {\n                KTUtil.css(el, vendors[i] + 'animation-duration', value);\n            }\n        },\n\n        scrollTo: function(target, offset, duration) {\n            var duration = duration ? duration : 500;\n            var target = KTUtil.get(target);\n            var targetPos = target ? KTUtil.offset(target).top : 0;\n            var scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n            var from, to;\n\n            if (targetPos > scrollPos) {\n                from = targetPos;\n                to = scrollPos;\n            } else {\n                from = scrollPos;\n                to = targetPos;\n            }\n\n            if (offset) {\n                to += offset;\n            }\n\n            KTUtil.animate(from, to, duration, function(value) {\n                document.documentElement.scrollTop = value;\n                document.body.parentNode.scrollTop = value;\n                document.body.scrollTop = value;\n            }); //, easing, done\n        },\n\n        scrollTop: function(offset, duration) {\n            KTUtil.scrollTo(null, offset, duration);\n        },\n\n        isArray: function(obj) {\n            return obj && Array.isArray(obj);\n        },\n\n        ready: function(callback) {\n            if (document.attachEvent ? document.readyState === \"complete\" : document.readyState !== \"loading\") {\n                callback();\n            } else {\n                document.addEventListener('DOMContentLoaded', callback);\n            }\n        },\n\n        isEmpty: function(obj) {\n            for (var prop in obj) {\n                if (obj.hasOwnProperty(prop)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        numberString: function(nStr) {\n            nStr += '';\n            var x = nStr.split('.');\n            var x1 = x[0];\n            var x2 = x.length > 1 ? '.' + x[1] : '';\n            var rgx = /(\\d+)(\\d{3})/;\n            while (rgx.test(x1)) {\n                x1 = x1.replace(rgx, '$1' + ',' + '$2');\n            }\n            return x1 + x2;\n        },\n\n        detectIE: function() {\n            var ua = window.navigator.userAgent;\n\n            // Test values; Uncomment to check result …\n\n            // IE 10\n            // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\n            // IE 11\n            // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\n            // Edge 12 (Spartan)\n            // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\n            // Edge 13\n            // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';\n\n            var msie = ua.indexOf('MSIE ');\n            if (msie > 0) {\n                // IE 10 or older => return version number\n                return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n            }\n\n            var trident = ua.indexOf('Trident/');\n            if (trident > 0) {\n                // IE 11 => return version number\n                var rv = ua.indexOf('rv:');\n                return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n            }\n\n            var edge = ua.indexOf('Edge/');\n            if (edge > 0) {\n                // Edge (IE 12+) => return version number\n                return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n            }\n\n            // other browser\n            return false;\n        },\n\n        isRTL: function() {\n            return (KTUtil.attr(KTUtil.get('html'), 'direction') == 'rtl');\n        },\n\n        //\n\n        // Scroller\n        scrollInit: function(element, options) {\n            if(!element) return;\n            // Define init function\n            function init() {\n                var ps;\n                var height;\n\n                if (options.height instanceof Function) {\n                    height = parseInt(options.height.call());\n                } else {\n                    height = parseInt(options.height);\n                }\n\n                // Destroy scroll on table and mobile modes\n                if ((options.mobileNativeScroll || options.disableForMobile) && KTUtil.isInResponsiveRange('tablet-and-mobile')) {\n                    ps = KTUtil.data(element).get('ps');\n                    if (ps) {\n                        if (options.resetHeightOnDestroy) {\n                            KTUtil.css(element, 'height', 'auto');\n                        } else {\n                            KTUtil.css(element, 'overflow', 'auto');\n                            if (height > 0) {\n                                KTUtil.css(element, 'height', height + 'px');\n                            }\n                        }\n\n                        ps.destroy();\n                        ps = KTUtil.data(element).remove('ps');\n                    } else if (height > 0){\n                        KTUtil.css(element, 'overflow', 'auto');\n                        KTUtil.css(element, 'height', height + 'px');\n                    }\n\n                    return;\n                }\n\n                if (height > 0) {\n                    KTUtil.css(element, 'height', height + 'px');\n                }\n\n                if (options.desktopNativeScroll) {\n                    KTUtil.css(element, 'overflow', 'auto');\n                    return;\n                }\n\n                // Init scroll\n                KTUtil.css(element, 'overflow', 'hidden');\n\n                ps = KTUtil.data(element).get('ps');\n                if (ps) {\n                    ps.update();\n                } else {\n                    KTUtil.addClass(element, 'kt-scroll');\n                    ps = new PerfectScrollbar(element, {\n                        wheelSpeed: 0.5,\n                        swipeEasing: true,\n                        wheelPropagation: (options.windowScroll === false ? false : true),\n                        minScrollbarLength: 40,\n                        maxScrollbarLength: 300,\n                        suppressScrollX: KTUtil.attr(element, 'data-scroll-x') != 'true' ? true : false\n                    });\n\n                    KTUtil.data(element).set('ps', ps);\n                }\n\n                // Remember scroll position in cookie\n                var uid = KTUtil.attr(element, 'id');\n\n                if (options.rememberPosition === true && Cookies && uid) {\n                    if (Cookies.get(uid)) {\n                        var pos = parseInt(Cookies.get(uid));\n\n                        if (pos > 0) {\n                            element.scrollTop = pos;\n                        }\n                    }\n\n                    element.addEventListener('ps-scroll-y', function() {\n                        Cookies.set(uid, element.scrollTop);\n                    });\n                }\n            }\n\n            // Init\n            init();\n\n            // Handle window resize\n            if (options.handleWindowResize) {\n                KTUtil.addResizeHandler(function() {\n                    init();\n                });\n            }\n        },\n\n        scrollUpdate: function(element) {\n            var ps = KTUtil.data(element).get('ps');\n            if (ps) {\n                ps.update();\n            }\n        },\n\n        scrollUpdateAll: function(parent) {\n            var scrollers = KTUtil.findAll(parent, '.ps');\n            for (var i = 0, len = scrollers.length; i < len; i++) {\n                KTUtil.scrollerUpdate(scrollers[i]);\n            }\n        },\n\n        scrollDestroy: function(element) {\n            var ps = KTUtil.data(element).get('ps');\n            if (ps) {\n                ps.destroy();\n                ps = KTUtil.data(element).remove('ps');\n            }\n        },\n\n        setHTML: function(el, html) {\n            if (KTUtil.get(el)) {\n                KTUtil.get(el).innerHTML = html;\n            }\n        },\n\n        getHTML: function(el) {\n            if (KTUtil.get(el)) {\n                return KTUtil.get(el).innerHTML;\n            }\n        },\n\n        getDocumentHeight: function() {\n            var body = document.body;\n            var html = document.documentElement;\n\n            return Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight );\n        },\n\n        getScrollTop: function() {\n            return  Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop);\n        }\n    }\n}();\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n    module.exports = KTUtil;\n}\n\n// Initialize KTUtil class on document ready\nKTUtil.ready(function() {\n    KTUtil.init();\n});\n\n\n\n\n//# sourceURL=webpack:///../src/assets/js/global/components/base/util.js?");

/***/ }),

/***/ "../src/assets/js/global/components/base/wizard.js":
/*!*********************************************************!*\
  !*** ../src/assets/js/global/components/base/wizard.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// plugin setup\nvar KTWizard = function(elementId, options) {\n    // Main object\n    var the = this;\n    var init = false;\n\n    // Get element object\n    var element = KTUtil.get(elementId);\n    var body = KTUtil.get('body');\n\n    if (!element) {\n        return;\n    }\n\n    // Default options\n    var defaultOptions = {\n        startStep: 1,\n        clickableSteps: true\n    };\n\n    ////////////////////////////\n    // ** Private Methods  ** //\n    ////////////////////////////\n\n    var Plugin = {\n        /**\n         * Construct\n         */\n\n        construct: function(options) {\n            if (KTUtil.data(element).has('wizard')) {\n                the = KTUtil.data(element).get('wizard');\n            } else {\n                // reset menu\n                Plugin.init(options);\n\n                // build menu\n                Plugin.build();\n\n                KTUtil.data(element).set('wizard', the);\n            }\n\n            return the;\n        },\n\n        /**\n         * Init wizard\n         */\n        init: function(options) {\n            the.element = element;\n            the.events = [];\n\n            // merge default and user defined options\n            the.options = KTUtil.deepExtend({}, defaultOptions, options);\n\n            // Elements\n            the.steps = KTUtil.findAll(element, '[data-ktwizard-type=\"step\"]');\n\n            the.btnSubmit = KTUtil.find(element, '[data-ktwizard-type=\"action-submit\"]');\n            the.btnNext = KTUtil.find(element, '[data-ktwizard-type=\"action-next\"]');\n            the.btnPrev = KTUtil.find(element, '[data-ktwizard-type=\"action-prev\"]');\n            the.btnLast = KTUtil.find(element, '[data-ktwizard-type=\"action-last\"]');\n            the.btnFirst = KTUtil.find(element, '[data-ktwizard-type=\"action-first\"]');\n\n            // Variables\n            the.events = [];\n            the.currentStep = 1;\n            the.stopped = false;\n            the.totalSteps = the.steps.length;\n\n            // Init current step\n            if (the.options.startStep > 1) {\n                Plugin.goTo(the.options.startStep);\n            }\n\n            // Init UI\n            Plugin.updateUI();\n        },\n\n        /**\n         * Build Form Wizard\n         */\n        build: function() {\n            // Next button event handler\n            KTUtil.addEvent(the.btnNext, 'click', function(e) {\n                e.preventDefault();\n                Plugin.goTo(Plugin.getNextStep(), true);\n            });\n\n            // Prev button event handler\n            KTUtil.addEvent(the.btnPrev, 'click', function(e) {\n                e.preventDefault();\n                Plugin.goTo(Plugin.getPrevStep(), true);\n            });\n\n            // First button event handler\n            KTUtil.addEvent(the.btnFirst, 'click', function(e) {\n                e.preventDefault();\n                Plugin.goTo(Plugin.getFirstStep(), true);\n            });\n\n            // Last button event handler\n            KTUtil.addEvent(the.btnLast, 'click', function(e) {\n                e.preventDefault();\n                Plugin.goTo(Plugin.getLastStep(), true);\n            });\n\n            if (the.options.clickableSteps === true) {\n                KTUtil.on(element, '[data-ktwizard-type=\"step\"]', 'click', function() {\n                    var index = KTUtil.index(this) + 1;\n                    if (index !== the.currentStep) {\n                        Plugin.goTo(index, true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Handles wizard click wizard\n         */\n        goTo: function(number, eventHandle) {\n            // Skip if this step is already shown\n            if (number === the.currentStep || number > the.totalSteps || number < 0) {\n                return;\n            }\n\n            // Validate step number\n            if (number) {\n                number = parseInt(number);\n            } else {\n                number = Plugin.getNextStep();\n            }\n\n            // Before next and prev events\n            var callback;\n\n            if (eventHandle === true) {\n                if (number > the.currentStep) {\n                    callback = Plugin.eventTrigger('beforeNext');\n                } else {\n                    callback = Plugin.eventTrigger('beforePrev');\n                }\n            }\n\n            // Skip if stopped\n            if (the.stopped === true) {\n                the.stopped = false;\n                return;\n            }\n\n            // Continue if no exit\n            if (callback !== false) {\n                // Before change\n                if (eventHandle === true) {\n                    Plugin.eventTrigger('beforeChange');\n                }\n\n                // Set current step\n                the.currentStep = number;\n\n                Plugin.updateUI();\n\n                // Trigger change event\n                if (eventHandle === true) {\n                    Plugin.eventTrigger('change');\n                }\n            }\n\n            // After next and prev events\n            if (eventHandle === true) {\n                if (number > the.startStep) {\n                    Plugin.eventTrigger('afterNext');\n                } else {\n                    Plugin.eventTrigger('afterPrev');\n                }\n            }\n\n            return the;\n        },\n\n        /**\n         * Cancel\n         */\n        stop: function() {\n            the.stopped = true;\n        },\n\n        /**\n         * Resume\n         */\n        start: function() {\n            the.stopped = false;\n        },\n\n        /**\n         * Check last step\n         */\n        isLastStep: function() {\n            return the.currentStep === the.totalSteps;\n        },\n\n        /**\n         * Check first step\n         */\n        isFirstStep: function() {\n            return the.currentStep === 1;\n        },\n\n        /**\n         * Check between step\n         */\n        isBetweenStep: function() {\n            return Plugin.isLastStep() === false && Plugin.isFirstStep() === false;\n        },\n\n        /**\n         * Go to the first step\n         */\n        updateUI: function() {\n            var stepType = '';\n            var index = the.currentStep - 1;\n\n            if (Plugin.isLastStep()) {\n                stepType = 'last';\n            } else if (Plugin.isFirstStep()) {\n                stepType = 'first';\n            } else {\n                stepType = 'between';\n            }\n\n            KTUtil.attr(the.element, 'data-ktwizard-state', stepType);\n\n            // Steps\n            var steps = KTUtil.findAll(the.element, '[data-ktwizard-type=\"step\"]');\n\n            if (steps && steps.length > 0) {\n                for (var i = 0, len = steps.length; i < len; i++) {\n                    if (i == index) {\n                        KTUtil.attr(steps[i], 'data-ktwizard-state', 'current');\n                    } else {\n                        if (i < index) {\n                            KTUtil.attr(steps[i], 'data-ktwizard-state', 'done');\n                        } else {\n                            KTUtil.attr(steps[i], 'data-ktwizard-state', 'pending');\n                        }\n                    }\n                }\n            }\n\n            // Steps Info\n            var stepsInfo = KTUtil.findAll(the.element, '[data-ktwizard-type=\"step-info\"]');\n            if (stepsInfo &&stepsInfo.length > 0) {\n                for (var i = 0, len = stepsInfo.length; i < len; i++) {\n                    if (i == index) {\n                        KTUtil.attr(stepsInfo[i], 'data-ktwizard-state', 'current');\n                    } else {\n                        KTUtil.removeAttr(stepsInfo[i], 'data-ktwizard-state');\n                    }\n                }\n            }\n\n            // Steps Content\n            var stepsContent = KTUtil.findAll(the.element, '[data-ktwizard-type=\"step-content\"]');\n            if (stepsContent&& stepsContent.length > 0) {\n                for (var i = 0, len = stepsContent.length; i < len; i++) {\n                    if (i == index) {\n                        KTUtil.attr(stepsContent[i], 'data-ktwizard-state', 'current');\n                    } else {\n                        KTUtil.removeAttr(stepsContent[i], 'data-ktwizard-state');\n                    }\n                }\n            }\n        },\n\n        /**\n         * Get next step\n         */\n        getNextStep: function() {\n            if (the.totalSteps >= (the.currentStep + 1)) {\n                return the.currentStep + 1;\n            } else {\n                return the.totalSteps;\n            }\n        },\n\n        /**\n         * Get prev step\n         */\n        getPrevStep: function() {\n            if ((the.currentStep - 1) >= 1) {\n                return the.currentStep - 1;\n            } else {\n                return 1;\n            }\n        },\n\n        /**\n         * Trigger events\n         */\n        eventTrigger: function(name, nested) {\n            //KTUtil.triggerCustomEvent(name);\n            for (var i = 0; i < the.events.length; i++) {\n                var event = the.events[i];\n                if (event.name == name) {\n                    if (event.one == true) {\n                        if (event.fired == false) {\n                            the.events[i].fired = true;\n                            return event.handler.call(this, the);\n                        }\n                    } else {\n                        return event.handler.call(this, the);\n                    }\n                }\n            }\n        },\n\n        addEvent: function(name, handler, one) {\n            the.events.push({\n                name: name,\n                handler: handler,\n                one: one,\n                fired: false\n            });\n\n            return the;\n        }\n    };\n\n    //////////////////////////\n    // ** Public Methods ** //\n    //////////////////////////\n\n    /**\n     * Set default options\n     */\n\n    the.setDefaults = function(options) {\n        defaultOptions = options;\n    };\n\n    /**\n     * Go to the next step\n     */\n    the.goNext = function(eventHandle) {\n        return Plugin.goTo(Plugin.getNextStep(), eventHandle);\n    };\n\n    /**\n     * Go to the prev step\n     */\n    the.goPrev = function(eventHandle) {\n        return Plugin.goTo(Plugin.getPrevStep(),eventHandle);\n    };\n\n    /**\n     * Go to the last step\n     */\n    the.goLast = function(eventHandle) {\n        return Plugin.goTo(Plugin.getLastStep(), eventHandle);\n    };\n\n    /**\n     * Go to the first step\n     */\n    the.goFirst = function(eventHandle) {\n        return Plugin.goTo(Plugin.getFirstStep(), eventHandle);\n    };\n\n    /**\n     * Go to a step\n     */\n    the.goTo = function(number, eventHandle) {\n        return Plugin.goTo(number, eventHandle);\n    };\n\n    /**\n     * Cancel step\n     */\n    the.stop = function() {\n        return Plugin.stop();\n    };\n\n    /**\n     * Resume step\n     */\n    the.start = function() {\n        return Plugin.start();\n    };\n\n    /**\n     * Get current step number\n     */\n    the.getStep = function() {\n        return the.currentStep;\n    };\n\n    /**\n     * Check last step\n     */\n    the.isLastStep = function() {\n        return Plugin.isLastStep();\n    };\n\n    /**\n     * Check first step\n     */\n    the.isFirstStep = function() {\n        return Plugin.isFirstStep();\n    };\n\n    /**\n     * Attach event\n     */\n    the.on = function(name, handler) {\n        return Plugin.addEvent(name, handler);\n    };\n\n    /**\n     * Attach event that will be fired once\n     */\n    the.one = function(name, handler) {\n        return Plugin.addEvent(name, handler, true);\n    };\n\n    // Construct plugin\n    Plugin.construct.apply(the, [options]);\n\n    return the;\n};\n\n// webpack support\nif ( true && typeof module.exports !== 'undefined') {\n    module.exports = KTWizard;\n}\n\n\n//# sourceURL=webpack:///../src/assets/js/global/components/base/wizard.js?");

/***/ }),

/***/ "../src/assets/js/global/layout/layout.js":
/*!************************************************!*\
  !*** ../src/assets/js/global/layout/layout.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayout = function() {\n    var body;\n\n    var header;\n    var headerMenu;\n    var headerMenuOffcanvas;\n\n    var asideMenu;\n    var asideMenuOffcanvas;\n    var asideToggler;\n\n    var asideSecondary;\n    var asideSecondaryToggler;\n\n    var scrollTop;\n\n    var pageStickyPortlet;\n\n    // Header\n    var initHeader = function() {\n        var tmp;\n        var headerEl = KTUtil.get('kt_header');\n        var options = {\n            classic: {\n                desktop: true,\n                mobile: false\n            },\n            offset: {},\n            minimize: {\n                desktop: {\n                    on: 'kt-header--minimize'\n                },\n                mobile: {\n                    on: 'kt-header--minimize'\n                }\n            }\n        };\n\n        if (tmp = KTUtil.attr(headerEl, 'data-ktheader-minimize-offset')) {\n            options.offset.desktop = tmp;\n        }\n\n        if (tmp = KTUtil.attr(headerEl, 'data-ktheader-minimize-mobile-offset')) {\n            options.offset.mobile = tmp;\n        }\n\n        header = new KTHeader('kt_header', options);\n    }\n\n    // Header Menu\n    var initHeaderMenu = function() {\n        // init aside left offcanvas\n        headerMenuOffcanvas = new KTOffcanvas('kt_header_menu_wrapper', {\n            overlay: true,\n            baseClass: 'kt-header-menu-wrapper',\n            closeBy: 'kt_header_menu_mobile_close_btn',\n            toggleBy: {\n                target: 'kt_header_mobile_toggler',\n                state: 'kt-header-mobile__toolbar-toggler--active'\n            }\n        });\n\n        headerMenu = new KTMenu('kt_header_menu', {\n            submenu: {\n                desktop: 'dropdown',\n                tablet: 'accordion',\n                mobile: 'accordion'\n            },\n            accordion: {\n                slideSpeed: 200, // accordion toggle slide speed in milliseconds\n                expandAll: false // allow having multiple expanded accordions in the menu\n            }\n        });\n    }\n\n    // Header Topbar\n    var initHeaderTopbar = function() {\n        asideToggler = new KTToggle('kt_header_mobile_topbar_toggler', {\n            target: 'body',\n            targetState: 'kt-header__topbar--mobile-on',\n            togglerState: 'kt-header-mobile__toolbar-topbar-toggler--active'\n        });\n    }\n\n    // Aside\n    var initAside = function() {\n        // init aside left offcanvas\n        var asidBrandHover = false;\n        var aside = KTUtil.get('kt_aside');\n        var asideBrand = KTUtil.get('kt_aside_brand');\n        var asideOffcanvasClass = KTUtil.hasClass(aside, 'kt-aside--offcanvas-default') ? 'kt-aside--offcanvas-default' : 'kt-aside';\n\n        asideMenuOffcanvas = new KTOffcanvas('kt_aside', {\n            baseClass: asideOffcanvasClass,\n            overlay: true,\n            closeBy: 'kt_aside_close_btn',\n            toggleBy: {\n                target: 'kt_aside_mobile_toggler',\n                state: 'kt-header-mobile__toolbar-toggler--active'\n            }\n        });\n\n        // Handle minimzied aside hover\n        if (KTUtil.hasClass(body, 'kt-aside--fixed')) {\n            var insideTm;\n            var outsideTm;\n\n            KTUtil.addEvent(aside, 'mouseenter', function(e) {\n                e.preventDefault();\n\n                if (KTUtil.isInResponsiveRange('desktop') === false) {\n                    return;\n                }\n\n                if (outsideTm) {\n                    clearTimeout(outsideTm);\n                    outsideTm = null;\n                }\n\n                insideTm = setTimeout(function() {\n                    if (KTUtil.hasClass(body, 'kt-aside--minimize') && KTUtil.isInResponsiveRange('desktop')) {\n                        KTUtil.removeClass(body, 'kt-aside--minimize');\n\n                        // Minimizing class\n                        KTUtil.addClass(body, 'kt-aside--minimizing');\n                        KTUtil.transitionEnd(body, function() {\n                            KTUtil.removeClass(body, 'kt-aside--minimizing');\n                        });\n\n                        // Hover class\n                        KTUtil.addClass(body, 'kt-aside--minimize-hover');\n                        asideMenu.scrollUpdate();\n                        \n                    }\n                }, 50);\n            });\n\n            KTUtil.addEvent(aside, 'mouseleave', function(e) {\n                e.preventDefault();\n\n                if (KTUtil.isInResponsiveRange('desktop') === false) {\n                    return;\n                }\n\n                if (insideTm) {\n                    clearTimeout(insideTm);\n                    insideTm = null;\n                }\n\n                outsideTm = setTimeout(function() {\n                    if (KTUtil.hasClass(body, 'kt-aside--minimize-hover') && KTUtil.isInResponsiveRange('desktop')) {\n                        KTUtil.removeClass(body, 'kt-aside--minimize-hover');\n                        KTUtil.addClass(body, 'kt-aside--minimize');\n\n                        // Minimizing class\n                        KTUtil.addClass(body, 'kt-aside--minimizing');\n                        KTUtil.transitionEnd(body, function() {\n                            KTUtil.removeClass(body, 'kt-aside--minimizing');\n                        });\n\n                        // Hover class\n                        asideMenu.scrollUpdate();\n                     \n                    }\n                }, 100);\n            });\n        }\n    }\n\n    // Aside menu\n    var initAsideMenu = function() {\n        // Init aside menu\n        var menu = KTUtil.get('kt_aside_menu');\n        var menuDesktopMode = (KTUtil.attr(menu, 'data-ktmenu-dropdown') === '1' ? 'dropdown' : 'accordion');\n\n        var scroll;\n        if (KTUtil.attr(menu, 'data-ktmenu-scroll') === '1') {\n            scroll = {\n                rememberPosition: true, // remember position on page reload\n                height: function() {  // calculate available scrollable area height\n                    var height;\n\n                    if (KTUtil.isInResponsiveRange('desktop')) {\n                        height =\n                            parseInt(KTUtil.getViewPort().height) -\n                            parseInt(KTUtil.actualHeight('kt_aside_brand')) -\n                            parseInt(KTUtil.getByID('kt_aside_footer') ? KTUtil.actualHeight('kt_aside_footer') : 0);\n                    } else {\n                        height =\n                            parseInt(KTUtil.getViewPort().height) -\n                            parseInt(KTUtil.getByID('kt_aside_footer') ? KTUtil.actualHeight('kt_aside_footer') : 0);\n                    }\n\n                    height = height - (parseInt(KTUtil.css(menu, 'marginBottom')) + parseInt(KTUtil.css(menu, 'marginTop')));\n\n                    return height;\n                }\n            };\n        }\n\n        asideMenu = new KTMenu('kt_aside_menu', {\n            // vertical scroll\n            scroll: scroll,\n\n            // submenu setup\n            submenu: {\n                desktop: menuDesktopMode,\n                tablet: 'accordion', // menu set to accordion in tablet mode\n                mobile: 'accordion' // menu set to accordion in mobile mode\n            },\n\n            //accordion setup\n            accordion: {\n                expandAll: false // allow having multiple expanded accordions in the menu\n            }\n        });\n    }\n\n    // Sidebar toggle\n    var initAsideToggler = function() {\n        if (!KTUtil.get('kt_aside_toggler')) {\n            return;\n        }\n\n        asideToggler = new KTToggle('kt_aside_toggler', {\n            target: 'body',\n            targetState: 'kt-aside--minimize',\n            togglerState: 'kt-aside__brand-aside-toggler--active'\n        });\n\n        asideToggler.on('toggle', function(toggle) {\n            KTUtil.addClass(body, 'kt-aside--minimizing');\n\n            if (KTUtil.get('kt_page_portlet')) {\n                pageStickyPortlet.updateSticky();\n            }\n\n            KTUtil.transitionEnd(body, function() {\n                KTUtil.removeClass(body, 'kt-aside--minimizing');\n            });\n\n            headerMenu.pauseDropdownHover(800);\n            asideMenu.pauseDropdownHover(800);\n\n            // Remember state in cookie\n            Cookies.set('kt_aside_toggle_state', toggle.getState());\n            // to set default minimized left aside use this cookie value in your\n            // server side code and add \"kt-brand--minimize kt-aside--minimize\" classes to\n            // the body tag in order to initialize the minimized left aside mode during page loading.\n        });\n\n        asideToggler.on('beforeToggle', function(toggle) {\n            var body = KTUtil.get('body');\n            if (KTUtil.hasClass(body, 'kt-aside--minimize') === false && KTUtil.hasClass(body, 'kt-aside--minimize-hover')) {\n                KTUtil.removeClass(body, 'kt-aside--minimize-hover');\n            }\n        });\n    }\n\n      // Init page sticky portlet\n    var initPageStickyPortlet = function() {\n\n        return new KTPortlet('kt_page_portlet', {\n\t\t\tsticky: {\n\t\t\t\toffset: parseInt(KTUtil.css(KTUtil.get('kt_header'), 'height')) + 200,\n\t\t\t\tzIndex: 90,\n\t\t\t\tposition: {\n\t\t\t\t\ttop: function() {\n\t\t\t\t\t\tvar pos = 0;\n\n\t\t\t\t\t\tif (KTUtil.isInResponsiveRange('desktop')) {\n\t\t\t\t\t\t\tif (KTUtil.hasClass(body, 'kt-header--fixed')) {\n\t\t\t\t\t\t\t\tpos = 55; // fixed header height\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (KTUtil.hasClass(body, 'kt-subheader--fixed') && KTUtil.get('kt_subheader')) {\n\t\t\t\t\t\t\t\tpos = pos + 54; // sticky subheader height\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (KTUtil.hasClass(body, 'kt-header-mobile--fixed')) {\n\t\t\t\t\t\t\t\tpos = parseInt(KTUtil.css(KTUtil.get('kt_header_mobile'), 'height'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn pos;\n\t\t\t\t\t},\n\t\t\t\t\tleft: function(portlet) {\n\t\t\t\t\t\tvar porletEl = portlet.getSelf();\n\n\t\t\t\t\t\treturn KTUtil.offset(porletEl).left;\n\t\t\t\t\t},\n\t\t\t\t\tright: function(portlet) {\n\t\t\t\t\t\tvar porletEl = portlet.getSelf();\n\n\t\t\t\t\t\tvar portletWidth = parseInt(KTUtil.css(porletEl, 'width'));\n\t\t\t\t\t\tvar bodyWidth = parseInt(KTUtil.css(KTUtil.get('body'), 'width'));\n\t\t\t\t\t\tvar portletOffsetLeft = KTUtil.offset(porletEl).left;\n\n\t\t\t\t\t\treturn bodyWidth - portletWidth - portletOffsetLeft;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n    }\n\n\t// Calculate content available full height\n\tvar getContentHeight = function() {\n\t\tvar height;\n\n\t\theight = KTUtil.getViewPort().height;\n\n\t\tif (KTUtil.getByID('kt_header')) {\n            height = height - KTUtil.actualHeight('kt_header');\n\t\t}\n\n\t\tif (KTUtil.getByID('kt_subheader')) {\n            height = height - KTUtil.actualHeight('kt_subheader');\n\t\t}\n\n\t\tif (KTUtil.getByID('kt_footer')) {\n\t\t\theight = height - parseInt(KTUtil.css('kt_footer', 'height'));\n\t\t}\n\n\t\tif (KTUtil.getByID('kt_content')) {\n\t\t\theight = height - parseInt(KTUtil.css('kt_content', 'padding-top')) - parseInt(KTUtil.css('kt_content', 'padding-bottom'));\n        }\n\n        return height;\n\t}\n\n    return {\n        init: function() {\n            body = KTUtil.get('body');\n\n            this.initHeader();\n            this.initAside();\n            this.initPageStickyPortlet();\n\n            // Non functional links notice(can be removed in production)\n\t\t\t$('#kt_aside_menu, #kt_header_menu').on('click', '.kt-menu__link[href=\"#\"]', function(e) {\n\t\t\t\tswal.fire(\"\", \"You have clicked on a non-functional dummy link!\");\n\n\t\t\t\te.preventDefault();\n\t\t\t});\n        },\n\n        initHeader: function() {\n            initHeader();\n            initHeaderMenu();\n            initHeaderTopbar();\n            \n        },\n\n        initAside: function() {\n            initAside();\n            initAsideMenu();\n            initAsideToggler();\n\n            this.onAsideToggle(function(e) {\n                // Update sticky portlet\n                if (pageStickyPortlet) {\n                    pageStickyPortlet.updateSticky();\n                }\n\n                // Reload datatable\n                var datatables = $('.kt-datatable');\n                if (datatables) {\n                    datatables.each(function() {\n                        $(this).KTDatatable('redraw');\n                    });\n                }\n            });\n        },\n\n        initAsideSecondary: function() {\n            initAsideSecondary();\n        },\n\n        initPageStickyPortlet: function() {\n            if (!KTUtil.get('kt_page_portlet')) {\n                return;\n            }\n\n            pageStickyPortlet = initPageStickyPortlet();\n            pageStickyPortlet.initSticky();\n\n            KTUtil.addResizeHandler(function(){\n                pageStickyPortlet.updateSticky();\n            });\n\n            initPageStickyPortlet();\n        },\n\n        getAsideMenu: function() {\n            return asideMenu;\n        },\n\n        onAsideToggle: function(handler) {\n            if (typeof asideToggler.element !== 'undefined') {\n                asideToggler.on('toggle', handler);\n            }\n        },\n\n        getAsideToggler: function() {\n            return asideToggler;\n        },\n\n        openAsideSecondary: function() {\n            asideSecondaryToggler.toggleOn();\n        },\n\n        closeAsideSecondary: function() {\n            asideSecondaryToggler.toggleOff();\n        },\n\n        getAsideSecondaryToggler: function() {\n            return asideSecondaryToggler;\n        },\n\n        onAsideSecondaryToggle: function(handler) {\n            if (asideSecondaryToggler) {\n                asideSecondaryToggler.on('toggle', handler);\n            }\n        },\n\n        closeMobileAsideMenuOffcanvas: function() {\n            if (KTUtil.isMobileDevice()) {\n                asideMenuOffcanvas.hide();\n            }\n        },\n\n        closeMobileHeaderMenuOffcanvas: function() {\n            if (KTUtil.isMobileDevice()) {\n                headerMenuOffcanvas.hide();\n            }\n        },\n\n        getContentHeight: function() {\n\t\t\treturn getContentHeight();\n\t\t}\n    };\n}();\n\n// webpack support\nif (true) {\n    module.exports = KTLayout;\n}\n\n$(document).ready(function() {\n    KTLayout.init();\n});\n\n\n//# sourceURL=webpack:///../src/assets/js/global/layout/layout.js?");

/***/ }),



/***/ "./webpack/scripts.js":
/*!****************************!*\
  !*** ./webpack/scripts.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Define the output of this file. The output of CSS and JS file will be auto detected.\n *\n * @output js/scripts.bundle\n */\n\n// Keentheme\"s plugins\nwindow.KTUtil = __webpack_require__(/*! ../../src/assets/js/global/components/base/util */ \"../src/assets/js/global/components/base/util.js\");\nwindow.KTApp = __webpack_require__(/*! ../../src/assets/js/global/components/base/app */ \"../src/assets/js/global/components/base/app.js\");\nwindow.KTAvatar = __webpack_require__(/*! ../../src/assets/js/global/components/base/avatar */ \"../src/assets/js/global/components/base/avatar.js\");\n\nwindow.KTHeader = __webpack_require__(/*! ../../src/assets/js/global/components/base/header */ \"../src/assets/js/global/components/base/header.js\");\nwindow.KTMenu = __webpack_require__(/*! ../../src/assets/js/global/components/base/menu */ \"../src/assets/js/global/components/base/menu.js\");\nwindow.KTOffcanvas = __webpack_require__(/*! ../../src/assets/js/global/components/base/offcanvas */ \"../src/assets/js/global/components/base/offcanvas.js\");\n\n\nwindow.KTToggle = __webpack_require__(/*! ../../src/assets/js/global/components/base/toggle */ \"../src/assets/js/global/components/base/toggle.js\");\nwindow.KTWizard = __webpack_require__(/*! ../../src/assets/js/global/components/base/wizard */ \"../src/assets/js/global/components/base/wizard.js\");\n\n// Layout scripts\nwindow.KTLayout = __webpack_require__(/*! ../../src/assets/js/global/layout/layout */ \"../src/assets/js/global/layout/layout.js\");\n\n\n//# sourceURL=webpack:///./webpack/scripts.js?");

/***/ })

/******/ });